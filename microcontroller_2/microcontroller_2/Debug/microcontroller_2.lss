
microcontroller_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002f3  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ea  00000000  00000000  00000683  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ff  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009b  00000000  00000000  00000e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c0       	rjmp	.+296    	; 0x15e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	89 d0       	rcall	.+274    	; 0x1d6 <main>
  c4:	bf c0       	rjmp	.+382    	; 0x244 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	e1 ec       	ldi	r30, 0xC1	; 193
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 61       	ori	r24, 0x18	; 24
  d0:	80 83       	st	Z, r24
  d2:	e2 ec       	ldi	r30, 0xC2	; 194
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	86 60       	ori	r24, 0x06	; 6
  da:	80 83       	st	Z, r24
  dc:	83 e3       	ldi	r24, 0x33	; 51
  de:	80 93 c4 00 	sts	0x00C4, r24
  e2:	10 92 c5 00 	sts	0x00C5, r1
  e6:	08 95       	ret

000000e8 <USART_Flush>:
  e8:	80 91 c0 00 	lds	r24, 0x00C0
  ec:	88 23       	and	r24, r24
  ee:	54 f4       	brge	.+20     	; 0x104 <USART_Flush+0x1c>
  f0:	a6 ec       	ldi	r26, 0xC6	; 198
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e0 ec       	ldi	r30, 0xC0	; 192
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8c 91       	ld	r24, X
  fa:	80 93 04 01 	sts	0x0104, r24
  fe:	80 81       	ld	r24, Z
 100:	88 23       	and	r24, r24
 102:	d4 f3       	brlt	.-12     	; 0xf8 <USART_Flush+0x10>
 104:	08 95       	ret

00000106 <USART_Send>:
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	95 ff       	sbrs	r25, 5
 10e:	fd cf       	rjmp	.-6      	; 0x10a <USART_Send+0x4>
 110:	80 93 c6 00 	sts	0x00C6, r24
 114:	08 95       	ret

00000116 <TimerOn>:
 116:	8b e0       	ldi	r24, 0x0B	; 11
 118:	80 93 81 00 	sts	0x0081, r24
 11c:	8d e7       	ldi	r24, 0x7D	; 125
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 89 00 	sts	0x0089, r25
 124:	80 93 88 00 	sts	0x0088, r24
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 6f 00 	sts	0x006F, r24
 12e:	10 92 85 00 	sts	0x0085, r1
 132:	10 92 84 00 	sts	0x0084, r1
 136:	80 91 00 01 	lds	r24, 0x0100
 13a:	90 91 01 01 	lds	r25, 0x0101
 13e:	a0 91 02 01 	lds	r26, 0x0102
 142:	b0 91 03 01 	lds	r27, 0x0103
 146:	80 93 05 01 	sts	0x0105, r24
 14a:	90 93 06 01 	sts	0x0106, r25
 14e:	a0 93 07 01 	sts	0x0107, r26
 152:	b0 93 08 01 	sts	0x0108, r27
 156:	8f b7       	in	r24, 0x3f	; 63
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	8f bf       	out	0x3f, r24	; 63
 15c:	08 95       	ret

0000015e <__vector_13>:
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	80 91 05 01 	lds	r24, 0x0105
 174:	90 91 06 01 	lds	r25, 0x0106
 178:	a0 91 07 01 	lds	r26, 0x0107
 17c:	b0 91 08 01 	lds	r27, 0x0108
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	a1 09       	sbc	r26, r1
 184:	b1 09       	sbc	r27, r1
 186:	80 93 05 01 	sts	0x0105, r24
 18a:	90 93 06 01 	sts	0x0106, r25
 18e:	a0 93 07 01 	sts	0x0107, r26
 192:	b0 93 08 01 	sts	0x0108, r27
 196:	89 2b       	or	r24, r25
 198:	8a 2b       	or	r24, r26
 19a:	8b 2b       	or	r24, r27
 19c:	99 f4       	brne	.+38     	; 0x1c4 <__vector_13+0x66>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 09 01 	sts	0x0109, r24
 1a4:	80 91 00 01 	lds	r24, 0x0100
 1a8:	90 91 01 01 	lds	r25, 0x0101
 1ac:	a0 91 02 01 	lds	r26, 0x0102
 1b0:	b0 91 03 01 	lds	r27, 0x0103
 1b4:	80 93 05 01 	sts	0x0105, r24
 1b8:	90 93 06 01 	sts	0x0106, r25
 1bc:	a0 93 07 01 	sts	0x0107, r26
 1c0:	b0 93 08 01 	sts	0x0108, r27
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <main>:


//da main
int main(void)
{
	DDRB = 0x00; PORTB = 0xFF; // recorder button inputs
 1d6:	14 b8       	out	0x04, r1	; 4
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	85 b9       	out	0x05, r24	; 5
	DDRD = 0xFF; PORTD = 0x00; // USART transmit on D1
 1dc:	8a b9       	out	0x0a, r24	; 10
 1de:	1b b8       	out	0x0b, r1	; 11
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1e0:	84 e1       	ldi	r24, 0x14	; 20
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	a0 e0       	ldi	r26, 0x00	; 0
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	80 93 00 01 	sts	0x0100, r24
 1ec:	90 93 01 01 	sts	0x0101, r25
 1f0:	a0 93 02 01 	sts	0x0102, r26
 1f4:	b0 93 03 01 	sts	0x0103, r27
	_avr_timer_cntcurr = _avr_timer_M;
 1f8:	80 93 05 01 	sts	0x0105, r24
 1fc:	90 93 06 01 	sts	0x0106, r25
 200:	a0 93 07 01 	sts	0x0107, r26
 204:	b0 93 08 01 	sts	0x0108, r27
{
	DDRB = 0x00; PORTB = 0xFF; // recorder button inputs
	DDRD = 0xFF; PORTD = 0x00; // USART transmit on D1
	
	TimerSet(20);
	TimerOn();
 208:	86 df       	rcall	.-244    	; 0x116 <TimerOn>
	
	initUSART();
 20a:	5e df       	rcall	.-324    	; 0xc8 <initUSART>
	USART_Flush();
 20c:	6d df       	rcall	.-294    	; 0xe8 <USART_Flush>
//Functionality - checks if USART is ready to send
//Parameter: None
//Returns: 1 if true else 0
unsigned char USART_IsSendReady()
{
	return (UCSR0A & (1 << UDRE0));
 20e:	c0 ec       	ldi	r28, 0xC0	; 192
 210:	d0 e0       	ldi	r29, 0x00	; 0

	unsigned char i = 0;
	unsigned char bong = 0x00;
	while(1)
	{
		bong = ~PINB;
 212:	93 b1       	in	r25, 0x03	; 3
 214:	88 81       	ld	r24, Y

			if ( USART_IsSendReady() ) {
 216:	85 ff       	sbrs	r24, 5
 218:	0e c0       	rjmp	.+28     	; 0x236 <main+0x60>

	unsigned char i = 0;
	unsigned char bong = 0x00;
	while(1)
	{
		bong = ~PINB;
 21a:	90 95       	com	r25

			if ( USART_IsSendReady() ) {
				if (bong == 0x04) {
 21c:	94 30       	cpi	r25, 0x04	; 4
 21e:	19 f4       	brne	.+6      	; 0x226 <main+0x50>
					USART_Send(0x01);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	71 df       	rcall	.-286    	; 0x106 <USART_Send>
 224:	05 c0       	rjmp	.+10     	; 0x230 <main+0x5a>
				}
				if (bong == 0x02) {
 226:	92 30       	cpi	r25, 0x02	; 2
 228:	19 f4       	brne	.+6      	; 0x230 <main+0x5a>
					USART_Send(0x02);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	6c df       	rcall	.-296    	; 0x106 <USART_Send>
 22e:	02 c0       	rjmp	.+4      	; 0x234 <main+0x5e>
				}
				else {
					USART_Send(0x00);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	69 df       	rcall	.-302    	; 0x106 <USART_Send>
				}
				
				USART_Flush();
 234:	59 df       	rcall	.-334    	; 0xe8 <USART_Flush>
			}


		while (!TimerFlag);
 236:	80 91 09 01 	lds	r24, 0x0109
 23a:	88 23       	and	r24, r24
 23c:	e1 f3       	breq	.-8      	; 0x236 <main+0x60>
		TimerFlag = 0;
 23e:	10 92 09 01 	sts	0x0109, r1
		
	}
 242:	e7 cf       	rjmp	.-50     	; 0x212 <main+0x3c>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
