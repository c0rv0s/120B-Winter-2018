
nmuel_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000ed4  00000f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080013e  0080013e  00000fa6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d02  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f1  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a91  00000000  00000000  000020c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00002b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071f  00000000  00000000  0000317a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00003899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f1 c0       	rjmp	.+482    	; 0x218 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 33       	cpi	r26, 0x3E	; 62
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e3       	ldi	r26, 0x3E	; 62
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 35       	cpi	r26, 0x57	; 87
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	18 d4       	rcall	.+2096   	; 0x8f4 <main>
  c4:	05 c7       	rjmp	.+3594   	; 0xed0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	set_PWM(0);
}

void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	9c f4       	brge	.+38     	; 0xf4 <delay_ms+0x2c>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	77 e0       	ldi	r23, 0x07	; 7
  d4:	63 e0       	ldi	r22, 0x03	; 3
  d6:	0b c0       	rjmp	.+22     	; 0xee <delay_ms+0x26>
  d8:	00 00       	nop
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	31 09       	sbc	r19, r1
  de:	21 15       	cp	r18, r1
  e0:	31 05       	cpc	r19, r1
  e2:	d1 f7       	brne	.-12     	; 0xd8 <delay_ms+0x10>
  e4:	4f 5f       	subi	r20, 0xFF	; 255
  e6:	5f 4f       	sbci	r21, 0xFF	; 255
  e8:	48 17       	cp	r20, r24
  ea:	59 07       	cpc	r21, r25
  ec:	19 f0       	breq	.+6      	; 0xf4 <delay_ms+0x2c>
  ee:	27 2f       	mov	r18, r23
  f0:	36 2f       	mov	r19, r22
  f2:	f2 cf       	rjmp	.-28     	; 0xd8 <delay_ms+0x10>
  f4:	08 95       	ret

000000f6 <LCD_WriteCommand>:
  f6:	5e 98       	cbi	0x0b, 6	; 11
  f8:	88 b9       	out	0x08, r24	; 8
  fa:	5f 9a       	sbi	0x0b, 7	; 11
  fc:	00 00       	nop
  fe:	5f 98       	cbi	0x0b, 7	; 11
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 cf       	rjmp	.-62     	; 0xc8 <delay_ms>
 106:	08 95       	ret

00000108 <LCD_ClearScreen>:
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	f5 cf       	rjmp	.-22     	; 0xf6 <LCD_WriteCommand>
 10c:	08 95       	ret

0000010e <LCD_Cursor>:
 10e:	81 31       	cpi	r24, 0x11	; 17
 110:	18 f4       	brcc	.+6      	; 0x118 <LCD_Cursor+0xa>
 112:	81 58       	subi	r24, 0x81	; 129
 114:	f0 cf       	rjmp	.-32     	; 0xf6 <LCD_WriteCommand>
 116:	08 95       	ret
 118:	81 55       	subi	r24, 0x51	; 81
 11a:	ed cf       	rjmp	.-38     	; 0xf6 <LCD_WriteCommand>
 11c:	08 95       	ret

0000011e <LCD_init>:
 11e:	84 e6       	ldi	r24, 0x64	; 100
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	d2 df       	rcall	.-92     	; 0xc8 <delay_ms>
 124:	88 e3       	ldi	r24, 0x38	; 56
 126:	e7 df       	rcall	.-50     	; 0xf6 <LCD_WriteCommand>
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	e5 df       	rcall	.-54     	; 0xf6 <LCD_WriteCommand>
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	e3 df       	rcall	.-58     	; 0xf6 <LCD_WriteCommand>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	e1 df       	rcall	.-62     	; 0xf6 <LCD_WriteCommand>
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	c7 cf       	rjmp	.-114    	; 0xc8 <delay_ms>
 13a:	08 95       	ret

0000013c <LCD_WriteData>:
 13c:	5e 9a       	sbi	0x0b, 6	; 11
 13e:	88 b9       	out	0x08, r24	; 8
 140:	5f 9a       	sbi	0x0b, 7	; 11
 142:	00 00       	nop
 144:	5f 98       	cbi	0x0b, 7	; 11
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	be cf       	rjmp	.-132    	; 0xc8 <delay_ms>
 14c:	08 95       	ret

0000014e <LCD_DisplayString>:
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	18 2f       	mov	r17, r24
 158:	eb 01       	movw	r28, r22
 15a:	d6 df       	rcall	.-84     	; 0x108 <LCD_ClearScreen>
 15c:	88 81       	ld	r24, Y
 15e:	88 23       	and	r24, r24
 160:	59 f0       	breq	.+22     	; 0x178 <LCD_DisplayString+0x2a>
 162:	01 e0       	ldi	r16, 0x01	; 1
 164:	01 0f       	add	r16, r17
 166:	81 2f       	mov	r24, r17
 168:	d2 df       	rcall	.-92     	; 0x10e <LCD_Cursor>
 16a:	89 91       	ld	r24, Y+
 16c:	e7 df       	rcall	.-50     	; 0x13c <LCD_WriteData>
 16e:	88 81       	ld	r24, Y
 170:	88 23       	and	r24, r24
 172:	11 f0       	breq	.+4      	; 0x178 <LCD_DisplayString+0x2a>
 174:	10 2f       	mov	r17, r16
 176:	f5 cf       	rjmp	.-22     	; 0x162 <LCD_DisplayString+0x14>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <initUSART>:
 182:	e1 ec       	ldi	r30, 0xC1	; 193
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	88 61       	ori	r24, 0x18	; 24
 18a:	80 83       	st	Z, r24
 18c:	e2 ec       	ldi	r30, 0xC2	; 194
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	86 60       	ori	r24, 0x06	; 6
 194:	80 83       	st	Z, r24
 196:	83 e3       	ldi	r24, 0x33	; 51
 198:	80 93 c4 00 	sts	0x00C4, r24
 19c:	10 92 c5 00 	sts	0x00C5, r1
 1a0:	08 95       	ret

000001a2 <USART_Flush>:
 1a2:	80 91 c0 00 	lds	r24, 0x00C0
 1a6:	88 23       	and	r24, r24
 1a8:	54 f4       	brge	.+20     	; 0x1be <USART_Flush+0x1c>
 1aa:	a6 ec       	ldi	r26, 0xC6	; 198
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e0 ec       	ldi	r30, 0xC0	; 192
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	8c 91       	ld	r24, X
 1b4:	80 93 42 01 	sts	0x0142, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	d4 f3       	brlt	.-12     	; 0x1b2 <USART_Flush+0x10>
 1be:	08 95       	ret

000001c0 <USART_Receive>:
 1c0:	e0 ec       	ldi	r30, 0xC0	; 192
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	88 23       	and	r24, r24
 1c8:	ec f7       	brge	.-6      	; 0x1c4 <USART_Receive+0x4>
 1ca:	80 91 c6 00 	lds	r24, 0x00C6
 1ce:	08 95       	ret

000001d0 <TimerOn>:
 1d0:	8b e0       	ldi	r24, 0x0B	; 11
 1d2:	80 93 81 00 	sts	0x0081, r24
 1d6:	8d e7       	ldi	r24, 0x7D	; 125
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 89 00 	sts	0x0089, r25
 1de:	80 93 88 00 	sts	0x0088, r24
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 6f 00 	sts	0x006F, r24
 1e8:	10 92 85 00 	sts	0x0085, r1
 1ec:	10 92 84 00 	sts	0x0084, r1
 1f0:	80 91 20 01 	lds	r24, 0x0120
 1f4:	90 91 21 01 	lds	r25, 0x0121
 1f8:	a0 91 22 01 	lds	r26, 0x0122
 1fc:	b0 91 23 01 	lds	r27, 0x0123
 200:	80 93 43 01 	sts	0x0143, r24
 204:	90 93 44 01 	sts	0x0144, r25
 208:	a0 93 45 01 	sts	0x0145, r26
 20c:	b0 93 46 01 	sts	0x0146, r27
 210:	8f b7       	in	r24, 0x3f	; 63
 212:	80 68       	ori	r24, 0x80	; 128
 214:	8f bf       	out	0x3f, r24	; 63
 216:	08 95       	ret

00000218 <__vector_13>:
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	80 91 43 01 	lds	r24, 0x0143
 22e:	90 91 44 01 	lds	r25, 0x0144
 232:	a0 91 45 01 	lds	r26, 0x0145
 236:	b0 91 46 01 	lds	r27, 0x0146
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	a1 09       	sbc	r26, r1
 23e:	b1 09       	sbc	r27, r1
 240:	80 93 43 01 	sts	0x0143, r24
 244:	90 93 44 01 	sts	0x0144, r25
 248:	a0 93 45 01 	sts	0x0145, r26
 24c:	b0 93 46 01 	sts	0x0146, r27
 250:	89 2b       	or	r24, r25
 252:	8a 2b       	or	r24, r26
 254:	8b 2b       	or	r24, r27
 256:	99 f4       	brne	.+38     	; 0x27e <__vector_13+0x66>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 47 01 	sts	0x0147, r24
 25e:	80 91 20 01 	lds	r24, 0x0120
 262:	90 91 21 01 	lds	r25, 0x0121
 266:	a0 91 22 01 	lds	r26, 0x0122
 26a:	b0 91 23 01 	lds	r27, 0x0123
 26e:	80 93 43 01 	sts	0x0143, r24
 272:	90 93 44 01 	sts	0x0144, r25
 276:	a0 93 45 01 	sts	0x0145, r26
 27a:	b0 93 46 01 	sts	0x0146, r27
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <set_PWM>:
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	6b 01       	movw	r12, r22
 29a:	7c 01       	movw	r14, r24
 29c:	20 91 3e 01 	lds	r18, 0x013E
 2a0:	30 91 3f 01 	lds	r19, 0x013F
 2a4:	40 91 40 01 	lds	r20, 0x0140
 2a8:	50 91 41 01 	lds	r21, 0x0141
 2ac:	0e d4       	rcall	.+2076   	; 0xaca <__cmpsf2>
 2ae:	88 23       	and	r24, r24
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <set_PWM+0x24>
 2b2:	52 c0       	rjmp	.+164    	; 0x358 <set_PWM+0xc8>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	a9 01       	movw	r20, r18
 2ba:	c7 01       	movw	r24, r14
 2bc:	b6 01       	movw	r22, r12
 2be:	05 d4       	rcall	.+2058   	; 0xaca <__cmpsf2>
 2c0:	81 11       	cpse	r24, r1
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <set_PWM+0x40>
 2c4:	e1 e9       	ldi	r30, 0x91	; 145
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	88 70       	andi	r24, 0x08	; 8
 2cc:	80 83       	st	Z, r24
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <set_PWM+0x4a>
 2d0:	e1 e9       	ldi	r30, 0x91	; 145
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	83 60       	ori	r24, 0x03	; 3
 2d8:	80 83       	st	Z, r24
 2da:	28 e5       	ldi	r18, 0x58	; 88
 2dc:	39 e3       	ldi	r19, 0x39	; 57
 2de:	44 e7       	ldi	r20, 0x74	; 116
 2e0:	5f e3       	ldi	r21, 0x3F	; 63
 2e2:	c7 01       	movw	r24, r14
 2e4:	b6 01       	movw	r22, r12
 2e6:	f1 d3       	rcall	.+2018   	; 0xaca <__cmpsf2>
 2e8:	88 23       	and	r24, r24
 2ea:	3c f4       	brge	.+14     	; 0x2fa <set_PWM+0x6a>
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	9f ef       	ldi	r25, 0xFF	; 255
 2f0:	90 93 99 00 	sts	0x0099, r25
 2f4:	80 93 98 00 	sts	0x0098, r24
 2f8:	23 c0       	rjmp	.+70     	; 0x340 <set_PWM+0xb0>
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	34 e2       	ldi	r19, 0x24	; 36
 2fe:	44 ef       	ldi	r20, 0xF4	; 244
 300:	56 e4       	ldi	r21, 0x46	; 70
 302:	c7 01       	movw	r24, r14
 304:	b6 01       	movw	r22, r12
 306:	30 d5       	rcall	.+2656   	; 0xd68 <__gesf2>
 308:	18 16       	cp	r1, r24
 30a:	2c f4       	brge	.+10     	; 0x316 <set_PWM+0x86>
 30c:	10 92 99 00 	sts	0x0099, r1
 310:	10 92 98 00 	sts	0x0098, r1
 314:	15 c0       	rjmp	.+42     	; 0x340 <set_PWM+0xb0>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	53 e4       	ldi	r21, 0x43	; 67
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	26 d5       	rcall	.+2636   	; 0xd70 <__mulsf3>
 324:	9b 01       	movw	r18, r22
 326:	ac 01       	movw	r20, r24
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	74 e2       	ldi	r23, 0x24	; 36
 32c:	84 ef       	ldi	r24, 0xF4	; 244
 32e:	9a e4       	ldi	r25, 0x4A	; 74
 330:	d0 d3       	rcall	.+1952   	; 0xad2 <__divsf3>
 332:	37 d4       	rcall	.+2158   	; 0xba2 <__fixsfsi>
 334:	61 50       	subi	r22, 0x01	; 1
 336:	71 09       	sbc	r23, r1
 338:	70 93 99 00 	sts	0x0099, r23
 33c:	60 93 98 00 	sts	0x0098, r22
 340:	10 92 95 00 	sts	0x0095, r1
 344:	10 92 94 00 	sts	0x0094, r1
 348:	c0 92 3e 01 	sts	0x013E, r12
 34c:	d0 92 3f 01 	sts	0x013F, r13
 350:	e0 92 40 01 	sts	0x0140, r14
 354:	f0 92 41 01 	sts	0x0141, r15
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	08 95       	ret

00000362 <PWM_on>:
 362:	80 e4       	ldi	r24, 0x40	; 64
 364:	80 93 90 00 	sts	0x0090, r24
 368:	8b e0       	ldi	r24, 0x0B	; 11
 36a:	80 93 91 00 	sts	0x0091, r24
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	cb 01       	movw	r24, r22
 374:	8d cf       	rjmp	.-230    	; 0x290 <set_PWM>
 376:	08 95       	ret

00000378 <ADC_init>:
}

//ADC shit
void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 378:	ea e7       	ldi	r30, 0x7A	; 122
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	80 6e       	ori	r24, 0xE0	; 224
 380:	80 83       	st	Z, r24
 382:	08 95       	ret

00000384 <tickRecord>:
	//        the previous conversion completes.
}

//turn recording on and off
//state shit
void tickRecord(unsigned char temp) {
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
	//unsigned char temp = ~PINB & 0x0F;

	switch(rec_state) {
 388:	90 91 55 01 	lds	r25, 0x0155
 38c:	92 30       	cpi	r25, 0x02	; 2
 38e:	a9 f0       	breq	.+42     	; 0x3ba <tickRecord+0x36>
 390:	93 30       	cpi	r25, 0x03	; 3
 392:	09 f4       	brne	.+2      	; 0x396 <tickRecord+0x12>
 394:	40 c0       	rjmp	.+128    	; 0x416 <tickRecord+0x92>
 396:	91 11       	cpse	r25, r1
 398:	6a c0       	rjmp	.+212    	; 0x46e <tickRecord+0xea>
		case unarmed:
			if (temp == 0x01) {
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	39 f4       	brne	.+14     	; 0x3ac <tickRecord+0x28>
				//arm recording
				rec_state = armed;
 39e:	80 93 55 01 	sts	0x0155, r24
				rec_tick = 0;
 3a2:	10 92 50 01 	sts	0x0150, r1
 3a6:	10 92 4f 01 	sts	0x014F, r1
 3aa:	61 c0       	rjmp	.+194    	; 0x46e <tickRecord+0xea>
			}
			if (temp == 0x02) {
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <tickRecord+0x2e>
 3b0:	5e c0       	rjmp	.+188    	; 0x46e <tickRecord+0xea>
				//playback
				rec_state = playback;
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	80 93 55 01 	sts	0x0155, r24
 3b8:	5a c0       	rjmp	.+180    	; 0x46e <tickRecord+0xea>
			}
			break;
		case in_progress:
			if (rec_tick < 200) {
 3ba:	c0 91 4f 01 	lds	r28, 0x014F
 3be:	d0 91 50 01 	lds	r29, 0x0150
 3c2:	c8 3c       	cpi	r28, 0xC8	; 200
 3c4:	d1 05       	cpc	r29, r1
 3c6:	00 f5       	brcc	.+64     	; 0x408 <tickRecord+0x84>
				eeprom_write_word((uint16_t *)(rec_tick*18), (uint16_t)(note));
 3c8:	60 91 51 01 	lds	r22, 0x0151
 3cc:	70 91 52 01 	lds	r23, 0x0152
 3d0:	80 91 53 01 	lds	r24, 0x0153
 3d4:	90 91 54 01 	lds	r25, 0x0154
 3d8:	e9 d3       	rcall	.+2002   	; 0xbac <__fixunssfsi>
 3da:	cc 0f       	add	r28, r28
 3dc:	dd 1f       	adc	r29, r29
 3de:	9e 01       	movw	r18, r28
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	ce 01       	movw	r24, r28
 3ee:	82 0f       	add	r24, r18
 3f0:	93 1f       	adc	r25, r19
 3f2:	4d d5       	rcall	.+2714   	; 0xe8e <__eewr_word_m1284>
				rec_tick++;
 3f4:	80 91 4f 01 	lds	r24, 0x014F
 3f8:	90 91 50 01 	lds	r25, 0x0150
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	90 93 50 01 	sts	0x0150, r25
 402:	80 93 4f 01 	sts	0x014F, r24
 406:	33 c0       	rjmp	.+102    	; 0x46e <tickRecord+0xea>
			}
			else {
				rec_tick = 0;
 408:	10 92 50 01 	sts	0x0150, r1
 40c:	10 92 4f 01 	sts	0x014F, r1
				rec_state = unarmed;
 410:	10 92 55 01 	sts	0x0155, r1
 414:	2c c0       	rjmp	.+88     	; 0x46e <tickRecord+0xea>
			}
			break;
		case playback:
			if (rec_tick < 200) {
 416:	c0 91 4f 01 	lds	r28, 0x014F
 41a:	d0 91 50 01 	lds	r29, 0x0150
 41e:	c8 3c       	cpi	r28, 0xC8	; 200
 420:	d1 05       	cpc	r29, r1
 422:	f8 f4       	brcc	.+62     	; 0x462 <tickRecord+0xde>
				note = eeprom_read_word((uint16_t *)(rec_tick*18));
 424:	ce 01       	movw	r24, r28
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	9c 01       	movw	r18, r24
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	22 0f       	add	r18, r18
 432:	33 1f       	adc	r19, r19
 434:	22 0f       	add	r18, r18
 436:	33 1f       	adc	r19, r19
 438:	82 0f       	add	r24, r18
 43a:	93 1f       	adc	r25, r19
 43c:	23 d5       	rcall	.+2630   	; 0xe84 <__eerd_word_m1284>
 43e:	bc 01       	movw	r22, r24
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	df d3       	rcall	.+1982   	; 0xc04 <__floatunsisf>
 446:	60 93 51 01 	sts	0x0151, r22
 44a:	70 93 52 01 	sts	0x0152, r23
 44e:	80 93 53 01 	sts	0x0153, r24
 452:	90 93 54 01 	sts	0x0154, r25
				rec_tick++;
 456:	21 96       	adiw	r28, 0x01	; 1
 458:	d0 93 50 01 	sts	0x0150, r29
 45c:	c0 93 4f 01 	sts	0x014F, r28
 460:	06 c0       	rjmp	.+12     	; 0x46e <tickRecord+0xea>
			}
			else {
				rec_tick = 0;
 462:	10 92 50 01 	sts	0x0150, r1
 466:	10 92 4f 01 	sts	0x014F, r1
				rec_state = unarmed;
 46a:	10 92 55 01 	sts	0x0155, r1
			}
		default:
			break;
	}
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <tickSM>:

//SM shit
void tickSM(unsigned char display_counter) {
	unsigned char tempA = ~PINA & 0xF0;
 474:	90 b1       	in	r25, 0x00	; 0
 476:	90 95       	com	r25
 478:	39 2f       	mov	r19, r25
 47a:	30 7f       	andi	r19, 0xF0	; 240
	unsigned char tempB = ~PINB & 0x0F;
 47c:	23 b1       	in	r18, 0x03	; 3
 47e:	20 95       	com	r18
 480:	2f 70       	andi	r18, 0x0F	; 15
	switch(state) { //transitions
 482:	90 91 56 01 	lds	r25, 0x0156
 486:	91 30       	cpi	r25, 0x01	; 1
 488:	41 f0       	breq	.+16     	; 0x49a <tickSM+0x26>
 48a:	18 f0       	brcs	.+6      	; 0x492 <tickSM+0x1e>
 48c:	92 30       	cpi	r25, 0x02	; 2
 48e:	71 f0       	breq	.+28     	; 0x4ac <tickSM+0x38>
 490:	15 c0       	rjmp	.+42     	; 0x4bc <tickSM+0x48>
		case start:
			state = wait;
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	90 93 56 01 	sts	0x0156, r25
			break;
 498:	2e c1       	rjmp	.+604    	; 0x6f6 <tickSM+0x282>
		case wait:
			if (tempA == 0x00 && tempB == 0x00) {
 49a:	31 11       	cpse	r19, r1
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <tickSM+0x30>
 49e:	22 23       	and	r18, r18
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <tickSM+0x30>
 4a2:	29 c1       	rjmp	.+594    	; 0x6f6 <tickSM+0x282>
				state = wait;
			}
			else {
				state = play;
 4a4:	92 e0       	ldi	r25, 0x02	; 2
 4a6:	90 93 56 01 	sts	0x0156, r25
 4aa:	32 c1       	rjmp	.+612    	; 0x710 <tickSM+0x29c>
			}
			break;
		case play:
			if (tempA == 0x00 && tempB == 0x00) {
 4ac:	31 11       	cpse	r19, r1
 4ae:	30 c1       	rjmp	.+608    	; 0x710 <tickSM+0x29c>
 4b0:	21 11       	cpse	r18, r1
 4b2:	2e c1       	rjmp	.+604    	; 0x710 <tickSM+0x29c>
				state = wait;
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	90 93 56 01 	sts	0x0156, r25
 4ba:	1d c1       	rjmp	.+570    	; 0x6f6 <tickSM+0x282>
			else {
				state = play;
			}
			break;
		default:
			state = wait;
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	90 93 56 01 	sts	0x0156, r25
		break;
 4c2:	19 c1       	rjmp	.+562    	; 0x6f6 <tickSM+0x282>
	switch(state) { //actions
		case start:
			break;
		case wait:
			note = 0;
			if (viz_tick > 0 && display_counter == 4) {
 4c4:	84 30       	cpi	r24, 0x04	; 4
 4c6:	19 f4       	brne	.+6      	; 0x4ce <tickSM+0x5a>
				viz_tick--;
 4c8:	91 50       	subi	r25, 0x01	; 1
 4ca:	90 93 4a 01 	sts	0x014A, r25
			}
			
			button = 0;
 4ce:	10 92 49 01 	sts	0x0149, r1
			break;
 4d2:	09 c1       	rjmp	.+530    	; 0x6e6 <tickSM+0x272>
		case play:
			if (rec_state == armed) {
				rec_state = in_progress;
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	90 93 55 01 	sts	0x0155, r25
			}
			//update vars based on current note
			if (tempB == 0x01) {
 4da:	21 30       	cpi	r18, 0x01	; 1
 4dc:	f9 f4       	brne	.+62     	; 0x51c <tickSM+0xa8>
				note = 261.63;
 4de:	44 ea       	ldi	r20, 0xA4	; 164
 4e0:	50 ed       	ldi	r21, 0xD0	; 208
 4e2:	62 e8       	ldi	r22, 0x82	; 130
 4e4:	73 e4       	ldi	r23, 0x43	; 67
 4e6:	40 93 51 01 	sts	0x0151, r20
 4ea:	50 93 52 01 	sts	0x0152, r21
 4ee:	60 93 53 01 	sts	0x0153, r22
 4f2:	70 93 54 01 	sts	0x0154, r23
				if (button == 1) {
 4f6:	90 91 49 01 	lds	r25, 0x0149
 4fa:	91 30       	cpi	r25, 0x01	; 1
 4fc:	49 f4       	brne	.+18     	; 0x510 <tickSM+0x9c>
					if (display_counter == 4) {
 4fe:	84 30       	cpi	r24, 0x04	; 4
 500:	09 f0       	breq	.+2      	; 0x504 <tickSM+0x90>
 502:	f1 c0       	rjmp	.+482    	; 0x6e6 <tickSM+0x272>
						viz_tick++;
 504:	80 91 4a 01 	lds	r24, 0x014A
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	80 93 4a 01 	sts	0x014A, r24
 50e:	eb c0       	rjmp	.+470    	; 0x6e6 <tickSM+0x272>
					}
				}
				else {
					button = 1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	80 93 49 01 	sts	0x0149, r24
					viz_tick = 0;
 516:	10 92 4a 01 	sts	0x014A, r1
 51a:	08 95       	ret
				}
			}
			else if (tempB ==  0x02) {
 51c:	22 30       	cpi	r18, 0x02	; 2
 51e:	f9 f4       	brne	.+62     	; 0x55e <tickSM+0xea>
				note = 293.66;
 520:	4b e7       	ldi	r20, 0x7B	; 123
 522:	54 ed       	ldi	r21, 0xD4	; 212
 524:	62 e9       	ldi	r22, 0x92	; 146
 526:	73 e4       	ldi	r23, 0x43	; 67
 528:	40 93 51 01 	sts	0x0151, r20
 52c:	50 93 52 01 	sts	0x0152, r21
 530:	60 93 53 01 	sts	0x0153, r22
 534:	70 93 54 01 	sts	0x0154, r23
				if (button == 2) {
 538:	90 91 49 01 	lds	r25, 0x0149
 53c:	92 30       	cpi	r25, 0x02	; 2
 53e:	49 f4       	brne	.+18     	; 0x552 <tickSM+0xde>
					if (display_counter == 4) {
 540:	84 30       	cpi	r24, 0x04	; 4
 542:	09 f0       	breq	.+2      	; 0x546 <tickSM+0xd2>
 544:	d0 c0       	rjmp	.+416    	; 0x6e6 <tickSM+0x272>
						viz_tick++;
 546:	80 91 4a 01 	lds	r24, 0x014A
 54a:	8f 5f       	subi	r24, 0xFF	; 255
 54c:	80 93 4a 01 	sts	0x014A, r24
 550:	ca c0       	rjmp	.+404    	; 0x6e6 <tickSM+0x272>
					}
				}
				else {
					button = 2;
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	80 93 49 01 	sts	0x0149, r24
					viz_tick = 0;
 558:	10 92 4a 01 	sts	0x014A, r1
 55c:	08 95       	ret
				}
			}
			else if (tempB == 0x04) {
 55e:	24 30       	cpi	r18, 0x04	; 4
 560:	f9 f4       	brne	.+62     	; 0x5a0 <tickSM+0x12c>
				note = 329.63;
 562:	44 ea       	ldi	r20, 0xA4	; 164
 564:	50 ed       	ldi	r21, 0xD0	; 208
 566:	64 ea       	ldi	r22, 0xA4	; 164
 568:	73 e4       	ldi	r23, 0x43	; 67
 56a:	40 93 51 01 	sts	0x0151, r20
 56e:	50 93 52 01 	sts	0x0152, r21
 572:	60 93 53 01 	sts	0x0153, r22
 576:	70 93 54 01 	sts	0x0154, r23
				if (button == 3) {
 57a:	90 91 49 01 	lds	r25, 0x0149
 57e:	93 30       	cpi	r25, 0x03	; 3
 580:	49 f4       	brne	.+18     	; 0x594 <tickSM+0x120>
					if (display_counter == 4) {
 582:	84 30       	cpi	r24, 0x04	; 4
 584:	09 f0       	breq	.+2      	; 0x588 <tickSM+0x114>
 586:	af c0       	rjmp	.+350    	; 0x6e6 <tickSM+0x272>
						viz_tick++;
 588:	80 91 4a 01 	lds	r24, 0x014A
 58c:	8f 5f       	subi	r24, 0xFF	; 255
 58e:	80 93 4a 01 	sts	0x014A, r24
 592:	a9 c0       	rjmp	.+338    	; 0x6e6 <tickSM+0x272>
					}
				}
				else {
					button = 3;
 594:	83 e0       	ldi	r24, 0x03	; 3
 596:	80 93 49 01 	sts	0x0149, r24
					viz_tick = 0;
 59a:	10 92 4a 01 	sts	0x014A, r1
 59e:	08 95       	ret
				}
			}
			else if (tempB == 0x08) {
 5a0:	28 30       	cpi	r18, 0x08	; 8
 5a2:	f9 f4       	brne	.+62     	; 0x5e2 <tickSM+0x16e>
				note = 349.23;
 5a4:	41 e7       	ldi	r20, 0x71	; 113
 5a6:	5d e9       	ldi	r21, 0x9D	; 157
 5a8:	6e ea       	ldi	r22, 0xAE	; 174
 5aa:	73 e4       	ldi	r23, 0x43	; 67
 5ac:	40 93 51 01 	sts	0x0151, r20
 5b0:	50 93 52 01 	sts	0x0152, r21
 5b4:	60 93 53 01 	sts	0x0153, r22
 5b8:	70 93 54 01 	sts	0x0154, r23
				if (button == 4) {
 5bc:	90 91 49 01 	lds	r25, 0x0149
 5c0:	94 30       	cpi	r25, 0x04	; 4
 5c2:	49 f4       	brne	.+18     	; 0x5d6 <tickSM+0x162>
					if (display_counter == 4) {
 5c4:	84 30       	cpi	r24, 0x04	; 4
 5c6:	09 f0       	breq	.+2      	; 0x5ca <tickSM+0x156>
 5c8:	8e c0       	rjmp	.+284    	; 0x6e6 <tickSM+0x272>
						viz_tick++;
 5ca:	80 91 4a 01 	lds	r24, 0x014A
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	80 93 4a 01 	sts	0x014A, r24
 5d4:	88 c0       	rjmp	.+272    	; 0x6e6 <tickSM+0x272>
					}
				}
				else {
					button = 4;
 5d6:	84 e0       	ldi	r24, 0x04	; 4
 5d8:	80 93 49 01 	sts	0x0149, r24
					viz_tick = 0;
 5dc:	10 92 4a 01 	sts	0x014A, r1
 5e0:	08 95       	ret
				}
			}
			else if (tempA == 0x10) {
 5e2:	30 31       	cpi	r19, 0x10	; 16
 5e4:	f9 f4       	brne	.+62     	; 0x624 <tickSM+0x1b0>
				note = 392.0;
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	64 ec       	ldi	r22, 0xC4	; 196
 5ec:	73 e4       	ldi	r23, 0x43	; 67
 5ee:	40 93 51 01 	sts	0x0151, r20
 5f2:	50 93 52 01 	sts	0x0152, r21
 5f6:	60 93 53 01 	sts	0x0153, r22
 5fa:	70 93 54 01 	sts	0x0154, r23
				if (button == 5) {
 5fe:	90 91 49 01 	lds	r25, 0x0149
 602:	95 30       	cpi	r25, 0x05	; 5
 604:	49 f4       	brne	.+18     	; 0x618 <tickSM+0x1a4>
					if (display_counter == 4) {
 606:	84 30       	cpi	r24, 0x04	; 4
 608:	09 f0       	breq	.+2      	; 0x60c <tickSM+0x198>
 60a:	6d c0       	rjmp	.+218    	; 0x6e6 <tickSM+0x272>
						viz_tick++;
 60c:	80 91 4a 01 	lds	r24, 0x014A
 610:	8f 5f       	subi	r24, 0xFF	; 255
 612:	80 93 4a 01 	sts	0x014A, r24
 616:	67 c0       	rjmp	.+206    	; 0x6e6 <tickSM+0x272>
					}
				}
				else {
					button = 5;
 618:	85 e0       	ldi	r24, 0x05	; 5
 61a:	80 93 49 01 	sts	0x0149, r24
					viz_tick = 0;
 61e:	10 92 4a 01 	sts	0x014A, r1
 622:	08 95       	ret
				}
			}
			else if (tempA == 0x20) {
 624:	30 32       	cpi	r19, 0x20	; 32
 626:	f9 f4       	brne	.+62     	; 0x666 <tickSM+0x1f2>
				note = 440.0;
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	6c ed       	ldi	r22, 0xDC	; 220
 62e:	73 e4       	ldi	r23, 0x43	; 67
 630:	40 93 51 01 	sts	0x0151, r20
 634:	50 93 52 01 	sts	0x0152, r21
 638:	60 93 53 01 	sts	0x0153, r22
 63c:	70 93 54 01 	sts	0x0154, r23
				if (button == 6) {
 640:	90 91 49 01 	lds	r25, 0x0149
 644:	96 30       	cpi	r25, 0x06	; 6
 646:	49 f4       	brne	.+18     	; 0x65a <tickSM+0x1e6>
					if (display_counter == 4) {
 648:	84 30       	cpi	r24, 0x04	; 4
 64a:	09 f0       	breq	.+2      	; 0x64e <tickSM+0x1da>
 64c:	4c c0       	rjmp	.+152    	; 0x6e6 <tickSM+0x272>
						viz_tick++;
 64e:	80 91 4a 01 	lds	r24, 0x014A
 652:	8f 5f       	subi	r24, 0xFF	; 255
 654:	80 93 4a 01 	sts	0x014A, r24
 658:	46 c0       	rjmp	.+140    	; 0x6e6 <tickSM+0x272>
					}
				}
				else {
					button = 6;
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	80 93 49 01 	sts	0x0149, r24
					viz_tick = 0;
 660:	10 92 4a 01 	sts	0x014A, r1
 664:	08 95       	ret
				}
			}
			else if (tempA == 0x40) {
 666:	30 34       	cpi	r19, 0x40	; 64
 668:	f1 f4       	brne	.+60     	; 0x6a6 <tickSM+0x232>
				note = 493.88;
 66a:	44 ea       	ldi	r20, 0xA4	; 164
 66c:	50 ef       	ldi	r21, 0xF0	; 240
 66e:	66 ef       	ldi	r22, 0xF6	; 246
 670:	73 e4       	ldi	r23, 0x43	; 67
 672:	40 93 51 01 	sts	0x0151, r20
 676:	50 93 52 01 	sts	0x0152, r21
 67a:	60 93 53 01 	sts	0x0153, r22
 67e:	70 93 54 01 	sts	0x0154, r23
				if (button == 7) {
 682:	90 91 49 01 	lds	r25, 0x0149
 686:	97 30       	cpi	r25, 0x07	; 7
 688:	41 f4       	brne	.+16     	; 0x69a <tickSM+0x226>
					if (display_counter == 4) {
 68a:	84 30       	cpi	r24, 0x04	; 4
 68c:	61 f5       	brne	.+88     	; 0x6e6 <tickSM+0x272>
						viz_tick++;
 68e:	80 91 4a 01 	lds	r24, 0x014A
 692:	8f 5f       	subi	r24, 0xFF	; 255
 694:	80 93 4a 01 	sts	0x014A, r24
 698:	26 c0       	rjmp	.+76     	; 0x6e6 <tickSM+0x272>
					}
				}
				else {
					button = 7;
 69a:	87 e0       	ldi	r24, 0x07	; 7
 69c:	80 93 49 01 	sts	0x0149, r24
					viz_tick = 0;
 6a0:	10 92 4a 01 	sts	0x014A, r1
 6a4:	08 95       	ret
				}
			}
			else if (tempA == 0x80) {
 6a6:	30 38       	cpi	r19, 0x80	; 128
 6a8:	f1 f4       	brne	.+60     	; 0x6e6 <tickSM+0x272>
				note = 523.25;
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	50 ed       	ldi	r21, 0xD0	; 208
 6ae:	62 e0       	ldi	r22, 0x02	; 2
 6b0:	74 e4       	ldi	r23, 0x44	; 68
 6b2:	40 93 51 01 	sts	0x0151, r20
 6b6:	50 93 52 01 	sts	0x0152, r21
 6ba:	60 93 53 01 	sts	0x0153, r22
 6be:	70 93 54 01 	sts	0x0154, r23
				if (button == 8) {
 6c2:	90 91 49 01 	lds	r25, 0x0149
 6c6:	98 30       	cpi	r25, 0x08	; 8
 6c8:	41 f4       	brne	.+16     	; 0x6da <tickSM+0x266>
					if (display_counter == 4) {
 6ca:	84 30       	cpi	r24, 0x04	; 4
 6cc:	61 f4       	brne	.+24     	; 0x6e6 <tickSM+0x272>
						viz_tick++;
 6ce:	80 91 4a 01 	lds	r24, 0x014A
 6d2:	8f 5f       	subi	r24, 0xFF	; 255
 6d4:	80 93 4a 01 	sts	0x014A, r24
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <tickSM+0x272>
					}
				}
				else {
					button = 8;
 6da:	88 e0       	ldi	r24, 0x08	; 8
 6dc:	80 93 49 01 	sts	0x0149, r24
					viz_tick = 0;
 6e0:	10 92 4a 01 	sts	0x014A, r1
 6e4:	08 95       	ret
			break;
		default:
			break;
	} //actions
	
	if (viz_tick > 4) {
 6e6:	80 91 4a 01 	lds	r24, 0x014A
 6ea:	85 30       	cpi	r24, 0x05	; 5
 6ec:	b8 f0       	brcs	.+46     	; 0x71c <tickSM+0x2a8>
		viz_tick = 4;
 6ee:	84 e0       	ldi	r24, 0x04	; 4
 6f0:	80 93 4a 01 	sts	0x014A, r24
 6f4:	08 95       	ret
	
	switch(state) { //actions
		case start:
			break;
		case wait:
			note = 0;
 6f6:	10 92 51 01 	sts	0x0151, r1
 6fa:	10 92 52 01 	sts	0x0152, r1
 6fe:	10 92 53 01 	sts	0x0153, r1
 702:	10 92 54 01 	sts	0x0154, r1
			if (viz_tick > 0 && display_counter == 4) {
 706:	90 91 4a 01 	lds	r25, 0x014A
 70a:	91 11       	cpse	r25, r1
 70c:	db ce       	rjmp	.-586    	; 0x4c4 <tickSM+0x50>
 70e:	df ce       	rjmp	.-578    	; 0x4ce <tickSM+0x5a>
			}
			
			button = 0;
			break;
		case play:
			if (rec_state == armed) {
 710:	90 91 55 01 	lds	r25, 0x0155
 714:	91 30       	cpi	r25, 0x01	; 1
 716:	09 f0       	breq	.+2      	; 0x71a <tickSM+0x2a6>
 718:	e0 ce       	rjmp	.-576    	; 0x4da <tickSM+0x66>
 71a:	dc ce       	rjmp	.-584    	; 0x4d4 <tickSM+0x60>
 71c:	08 95       	ret

0000071e <bend_pitch>:
		viz_tick = 4;
	}
}

//pitch bend
void bend_pitch() {
 71e:	cf 92       	push	r12
 720:	df 92       	push	r13
 722:	ef 92       	push	r14
 724:	ff 92       	push	r15
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
	x = ADC - 500;	//normalize the ADC reading so not touching ~= 519
 72a:	80 91 78 00 	lds	r24, 0x0078
 72e:	90 91 79 00 	lds	r25, 0x0079
 732:	ec 01       	movw	r28, r24
 734:	c4 5f       	subi	r28, 0xF4	; 244
 736:	d1 40       	sbci	r29, 0x01	; 1
 738:	d0 93 4e 01 	sts	0x014E, r29
 73c:	c0 93 4d 01 	sts	0x014D, r28
	if (x > -500 && x < 500) {	//if its within this range it means you're touching it
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	87 3e       	cpi	r24, 0xE7	; 231
 744:	93 40       	sbci	r25, 0x03	; 3
 746:	08 f0       	brcs	.+2      	; 0x74a <bend_pitch+0x2c>
 748:	50 c0       	rjmp	.+160    	; 0x7ea <bend_pitch+0xcc>
		if (note != 0) {	//only bend if there is a note playing
 74a:	c0 90 51 01 	lds	r12, 0x0151
 74e:	d0 90 52 01 	lds	r13, 0x0152
 752:	e0 90 53 01 	lds	r14, 0x0153
 756:	f0 90 54 01 	lds	r15, 0x0154
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	a9 01       	movw	r20, r18
 760:	c7 01       	movw	r24, r14
 762:	b6 01       	movw	r22, r12
 764:	b2 d1       	rcall	.+868    	; 0xaca <__cmpsf2>
 766:	88 23       	and	r24, r24
 768:	09 f4       	brne	.+2      	; 0x76c <bend_pitch+0x4e>
 76a:	3f c0       	rjmp	.+126    	; 0x7ea <bend_pitch+0xcc>
			if ((prev_x < (x-10)) || (prev_x > (x+10))) {	//bend smoothener, only update if the reading has changed by 15
 76c:	80 91 4b 01 	lds	r24, 0x014B
 770:	90 91 4c 01 	lds	r25, 0x014C
 774:	9e 01       	movw	r18, r28
 776:	2a 50       	subi	r18, 0x0A	; 10
 778:	31 09       	sbc	r19, r1
 77a:	82 17       	cp	r24, r18
 77c:	93 07       	cpc	r25, r19
 77e:	2c f0       	brlt	.+10     	; 0x78a <bend_pitch+0x6c>
 780:	2c 5e       	subi	r18, 0xEC	; 236
 782:	3f 4f       	sbci	r19, 0xFF	; 255
 784:	28 17       	cp	r18, r24
 786:	39 07       	cpc	r19, r25
 788:	dc f4       	brge	.+54     	; 0x7c0 <bend_pitch+0xa2>
				prev_x = x;
 78a:	d0 93 4c 01 	sts	0x014C, r29
 78e:	c0 93 4b 01 	sts	0x014B, r28
				note += (x/10);
 792:	ce 01       	movw	r24, r28
 794:	6a e0       	ldi	r22, 0x0A	; 10
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	4e d3       	rcall	.+1692   	; 0xe36 <__divmodhi4>
 79a:	88 27       	eor	r24, r24
 79c:	77 fd       	sbrc	r23, 7
 79e:	80 95       	com	r24
 7a0:	98 2f       	mov	r25, r24
 7a2:	32 d2       	rcall	.+1124   	; 0xc08 <__floatsisf>
 7a4:	9b 01       	movw	r18, r22
 7a6:	ac 01       	movw	r20, r24
 7a8:	c7 01       	movw	r24, r14
 7aa:	b6 01       	movw	r22, r12
 7ac:	2a d1       	rcall	.+596    	; 0xa02 <__addsf3>
 7ae:	60 93 51 01 	sts	0x0151, r22
 7b2:	70 93 52 01 	sts	0x0152, r23
 7b6:	80 93 53 01 	sts	0x0153, r24
 7ba:	90 93 54 01 	sts	0x0154, r25
 7be:	15 c0       	rjmp	.+42     	; 0x7ea <bend_pitch+0xcc>
			}
			else {	//if less than 15, keep current bend
				note += (prev_x/10);
 7c0:	6a e0       	ldi	r22, 0x0A	; 10
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	38 d3       	rcall	.+1648   	; 0xe36 <__divmodhi4>
 7c6:	88 27       	eor	r24, r24
 7c8:	77 fd       	sbrc	r23, 7
 7ca:	80 95       	com	r24
 7cc:	98 2f       	mov	r25, r24
 7ce:	1c d2       	rcall	.+1080   	; 0xc08 <__floatsisf>
 7d0:	9b 01       	movw	r18, r22
 7d2:	ac 01       	movw	r20, r24
 7d4:	c7 01       	movw	r24, r14
 7d6:	b6 01       	movw	r22, r12
 7d8:	14 d1       	rcall	.+552    	; 0xa02 <__addsf3>
 7da:	60 93 51 01 	sts	0x0151, r22
 7de:	70 93 52 01 	sts	0x0152, r23
 7e2:	80 93 53 01 	sts	0x0153, r24
 7e6:	90 93 54 01 	sts	0x0154, r25
			}
		}
	}
}
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	ff 90       	pop	r15
 7f0:	ef 90       	pop	r14
 7f2:	df 90       	pop	r13
 7f4:	cf 90       	pop	r12
 7f6:	08 95       	ret

000007f8 <update_LCD>:
};


//visualize what's playing on the LCD
void update_LCD() {
	switch(viz_tick) {
 7f8:	80 91 4a 01 	lds	r24, 0x014A
 7fc:	82 30       	cpi	r24, 0x02	; 2
 7fe:	a9 f0       	breq	.+42     	; 0x82a <update_LCD+0x32>
 800:	28 f4       	brcc	.+10     	; 0x80c <update_LCD+0x14>
 802:	88 23       	and	r24, r24
 804:	49 f0       	breq	.+18     	; 0x818 <update_LCD+0x20>
 806:	81 30       	cpi	r24, 0x01	; 1
 808:	49 f0       	breq	.+18     	; 0x81c <update_LCD+0x24>
 80a:	53 c0       	rjmp	.+166    	; 0x8b2 <update_LCD+0xba>
 80c:	83 30       	cpi	r24, 0x03	; 3
 80e:	e1 f0       	breq	.+56     	; 0x848 <update_LCD+0x50>
 810:	84 30       	cpi	r24, 0x04	; 4
 812:	09 f4       	brne	.+2      	; 0x816 <update_LCD+0x1e>
 814:	30 c0       	rjmp	.+96     	; 0x876 <update_LCD+0x7e>
 816:	4d c0       	rjmp	.+154    	; 0x8b2 <update_LCD+0xba>
		case 0:
			LCD_ClearScreen();
 818:	77 dc       	rcall	.-1810   	; 0x108 <LCD_ClearScreen>
			break;
 81a:	4b c0       	rjmp	.+150    	; 0x8b2 <update_LCD+0xba>
		case 1:
			LCD_Cursor(24);
 81c:	88 e1       	ldi	r24, 0x18	; 24
 81e:	77 dc       	rcall	.-1810   	; 0x10e <LCD_Cursor>
			LCD_WriteData(0);
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	8c dc       	rcall	.-1768   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	8a dc       	rcall	.-1772   	; 0x13c <LCD_WriteData>
			break;
 828:	44 c0       	rjmp	.+136    	; 0x8b2 <update_LCD+0xba>
		case 2:
			LCD_Cursor(22);
 82a:	86 e1       	ldi	r24, 0x16	; 22
 82c:	70 dc       	rcall	.-1824   	; 0x10e <LCD_Cursor>
			LCD_WriteData(0);
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	85 dc       	rcall	.-1782   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	83 dc       	rcall	.-1786   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	81 dc       	rcall	.-1790   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	7f dc       	rcall	.-1794   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	7d dc       	rcall	.-1798   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	7b dc       	rcall	.-1802   	; 0x13c <LCD_WriteData>
			break;
 846:	35 c0       	rjmp	.+106    	; 0x8b2 <update_LCD+0xba>
		case 3:
			LCD_Cursor(20);
 848:	84 e1       	ldi	r24, 0x14	; 20
 84a:	61 dc       	rcall	.-1854   	; 0x10e <LCD_Cursor>
			LCD_WriteData(0);
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	76 dc       	rcall	.-1812   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	74 dc       	rcall	.-1816   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	72 dc       	rcall	.-1820   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	70 dc       	rcall	.-1824   	; 0x13c <LCD_WriteData>
			LCD_WriteData(2);
 85c:	82 e0       	ldi	r24, 0x02	; 2
 85e:	6e dc       	rcall	.-1828   	; 0x13c <LCD_WriteData>
			LCD_WriteData(2);
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	6c dc       	rcall	.-1832   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	6a dc       	rcall	.-1836   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	68 dc       	rcall	.-1840   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	66 dc       	rcall	.-1844   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	64 dc       	rcall	.-1848   	; 0x13c <LCD_WriteData>
			break;
 874:	1e c0       	rjmp	.+60     	; 0x8b2 <update_LCD+0xba>
		case 4:
			LCD_Cursor(18);
 876:	82 e1       	ldi	r24, 0x12	; 18
 878:	4a dc       	rcall	.-1900   	; 0x10e <LCD_Cursor>
			LCD_WriteData(0);
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	5f dc       	rcall	.-1858   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	5d dc       	rcall	.-1862   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	5b dc       	rcall	.-1866   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	59 dc       	rcall	.-1870   	; 0x13c <LCD_WriteData>
			LCD_WriteData(2);
 88a:	82 e0       	ldi	r24, 0x02	; 2
 88c:	57 dc       	rcall	.-1874   	; 0x13c <LCD_WriteData>
			LCD_WriteData(2);
 88e:	82 e0       	ldi	r24, 0x02	; 2
 890:	55 dc       	rcall	.-1878   	; 0x13c <LCD_WriteData>
			LCD_WriteData(3);
 892:	83 e0       	ldi	r24, 0x03	; 3
 894:	53 dc       	rcall	.-1882   	; 0x13c <LCD_WriteData>
			LCD_WriteData(3);
 896:	83 e0       	ldi	r24, 0x03	; 3
 898:	51 dc       	rcall	.-1886   	; 0x13c <LCD_WriteData>
			LCD_WriteData(2);
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	4f dc       	rcall	.-1890   	; 0x13c <LCD_WriteData>
			LCD_WriteData(2);
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	4d dc       	rcall	.-1894   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	4b dc       	rcall	.-1898   	; 0x13c <LCD_WriteData>
			LCD_WriteData(1);
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	49 dc       	rcall	.-1902   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	47 dc       	rcall	.-1906   	; 0x13c <LCD_WriteData>
			LCD_WriteData(0);
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	45 dc       	rcall	.-1910   	; 0x13c <LCD_WriteData>
			break;
		default:
			break;
	}
	switch(rec_state) {
 8b2:	80 91 55 01 	lds	r24, 0x0155
 8b6:	82 30       	cpi	r24, 0x02	; 2
 8b8:	41 f0       	breq	.+16     	; 0x8ca <update_LCD+0xd2>
 8ba:	83 30       	cpi	r24, 0x03	; 3
 8bc:	71 f0       	breq	.+28     	; 0x8da <update_LCD+0xe2>
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	89 f4       	brne	.+34     	; 0x8e4 <update_LCD+0xec>
		case armed:
			LCD_DisplayString(1,(const unsigned char*)"ready");
 8c2:	64 e2       	ldi	r22, 0x24	; 36
 8c4:	71 e0       	ldi	r23, 0x01	; 1
 8c6:	43 cc       	rjmp	.-1914   	; 0x14e <LCD_DisplayString>
			break;
 8c8:	08 95       	ret
		case in_progress:
			LCD_DisplayString(1,(const unsigned char*)"recording");
 8ca:	6a e2       	ldi	r22, 0x2A	; 42
 8cc:	71 e0       	ldi	r23, 0x01	; 1
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	3e dc       	rcall	.-1924   	; 0x14e <LCD_DisplayString>
			rec_flag = 1;
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	80 93 48 01 	sts	0x0148, r24
			break;
 8d8:	08 95       	ret
		case playback:
			LCD_DisplayString(1,(const unsigned char*)"playback");
 8da:	64 e3       	ldi	r22, 0x34	; 52
 8dc:	71 e0       	ldi	r23, 0x01	; 1
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	36 cc       	rjmp	.-1940   	; 0x14e <LCD_DisplayString>
			break;
 8e2:	08 95       	ret
		default:
			if (rec_flag == 1) {
 8e4:	80 91 48 01 	lds	r24, 0x0148
 8e8:	81 30       	cpi	r24, 0x01	; 1
 8ea:	19 f4       	brne	.+6      	; 0x8f2 <update_LCD+0xfa>
				rec_flag = 0;
 8ec:	10 92 48 01 	sts	0x0148, r1
				LCD_ClearScreen();
 8f0:	0b cc       	rjmp	.-2026   	; 0x108 <LCD_ClearScreen>
 8f2:	08 95       	ret

000008f4 <main>:
}

//da main
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // potentiometer  inputs
 8f4:	11 b8       	out	0x01, r1	; 1
 8f6:	2f ef       	ldi	r18, 0xFF	; 255
 8f8:	22 b9       	out	0x02, r18	; 2
	DDRB = 0xF0; PORTB = 0x0F; // PB6 is speaker output, 0-3 are other inputs
 8fa:	90 ef       	ldi	r25, 0xF0	; 240
 8fc:	94 b9       	out	0x04, r25	; 4
 8fe:	8f e0       	ldi	r24, 0x0F	; 15
 900:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 902:	27 b9       	out	0x07, r18	; 7
 904:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xF0; PORTD = 0x0F; // LCD control lines on D6 and D7, USART receive on D0
 906:	9a b9       	out	0x0a, r25	; 10
 908:	8b b9       	out	0x0b, r24	; 11
	
	//init stuff
	PWM_on();
 90a:	2b dd       	rcall	.-1450   	; 0x362 <PWM_on>
	LCD_init(); 
 90c:	08 dc       	rcall	.-2032   	; 0x11e <LCD_init>
	LCD_WriteCommand(0x0C);
 90e:	8c e0       	ldi	r24, 0x0C	; 12
 910:	f2 db       	rcall	.-2076   	; 0xf6 <LCD_WriteCommand>
	ADC_init();  
 912:	32 dd       	rcall	.-1436   	; 0x378 <ADC_init>
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 914:	84 e1       	ldi	r24, 0x14	; 20
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	a0 e0       	ldi	r26, 0x00	; 0
 91a:	b0 e0       	ldi	r27, 0x00	; 0
 91c:	80 93 20 01 	sts	0x0120, r24
 920:	90 93 21 01 	sts	0x0121, r25
 924:	a0 93 22 01 	sts	0x0122, r26
 928:	b0 93 23 01 	sts	0x0123, r27
	_avr_timer_cntcurr = _avr_timer_M;
 92c:	80 93 43 01 	sts	0x0143, r24
 930:	90 93 44 01 	sts	0x0144, r25
 934:	a0 93 45 01 	sts	0x0145, r26
 938:	b0 93 46 01 	sts	0x0146, r27
	PWM_on();
	LCD_init(); 
	LCD_WriteCommand(0x0C);
	ADC_init();  
	TimerSet(20);
	TimerOn();
 93c:	49 dc       	rcall	.-1902   	; 0x1d0 <TimerOn>
	
	//usart
	initUSART();
 93e:	21 dc       	rcall	.-1982   	; 0x182 <initUSART>
	USART_Flush();
 940:	30 dc       	rcall	.-1952   	; 0x1a2 <USART_Flush>

	//write custom chars
	LCD_WriteCommand(0x40);
 942:	80 e4       	ldi	r24, 0x40	; 64
 944:	d8 db       	rcall	.-2128   	; 0xf6 <LCD_WriteCommand>
 946:	c8 e1       	ldi	r28, 0x18	; 24
 948:	d1 e0       	ldi	r29, 0x01	; 1
 94a:	00 e2       	ldi	r16, 0x20	; 32
 94c:	11 e0       	ldi	r17, 0x01	; 1
	for(unsigned char i=0; i<8; i++){
		LCD_WriteData(low_bar[i]);
 94e:	89 91       	ld	r24, Y+
 950:	f5 db       	rcall	.-2070   	; 0x13c <LCD_WriteData>
	initUSART();
	USART_Flush();

	//write custom chars
	LCD_WriteCommand(0x40);
	for(unsigned char i=0; i<8; i++){
 952:	c0 17       	cp	r28, r16
 954:	d1 07       	cpc	r29, r17
 956:	d9 f7       	brne	.-10     	; 0x94e <main+0x5a>
		LCD_WriteData(low_bar[i]);
	}
	LCD_WriteCommand(0x80);
 958:	80 e8       	ldi	r24, 0x80	; 128
 95a:	cd db       	rcall	.-2150   	; 0xf6 <LCD_WriteCommand>
		
	LCD_WriteCommand(0x48);
 95c:	88 e4       	ldi	r24, 0x48	; 72
 95e:	cb db       	rcall	.-2154   	; 0xf6 <LCD_WriteCommand>
 960:	c0 e1       	ldi	r28, 0x10	; 16
 962:	d1 e0       	ldi	r29, 0x01	; 1
 964:	08 e1       	ldi	r16, 0x18	; 24
 966:	11 e0       	ldi	r17, 0x01	; 1
	for(unsigned char i=0; i<8; i++){
		LCD_WriteData(med_bar[i]);
 968:	89 91       	ld	r24, Y+
 96a:	e8 db       	rcall	.-2096   	; 0x13c <LCD_WriteData>
		LCD_WriteData(low_bar[i]);
	}
	LCD_WriteCommand(0x80);
		
	LCD_WriteCommand(0x48);
	for(unsigned char i=0; i<8; i++){
 96c:	c0 17       	cp	r28, r16
 96e:	d1 07       	cpc	r29, r17
 970:	d9 f7       	brne	.-10     	; 0x968 <main+0x74>
		LCD_WriteData(med_bar[i]);
	}
	LCD_WriteCommand(0x80);
 972:	80 e8       	ldi	r24, 0x80	; 128
 974:	c0 db       	rcall	.-2176   	; 0xf6 <LCD_WriteCommand>
	
	LCD_WriteCommand(0x50);
 976:	80 e5       	ldi	r24, 0x50	; 80
 978:	be db       	rcall	.-2180   	; 0xf6 <LCD_WriteCommand>
 97a:	c8 e0       	ldi	r28, 0x08	; 8
 97c:	d1 e0       	ldi	r29, 0x01	; 1
 97e:	00 e1       	ldi	r16, 0x10	; 16
 980:	11 e0       	ldi	r17, 0x01	; 1
	for(unsigned char i=0; i<8; i++){
		LCD_WriteData(high_bar[i]);
 982:	89 91       	ld	r24, Y+
 984:	db db       	rcall	.-2122   	; 0x13c <LCD_WriteData>
		LCD_WriteData(med_bar[i]);
	}
	LCD_WriteCommand(0x80);
	
	LCD_WriteCommand(0x50);
	for(unsigned char i=0; i<8; i++){
 986:	c0 17       	cp	r28, r16
 988:	d1 07       	cpc	r29, r17
 98a:	d9 f7       	brne	.-10     	; 0x982 <main+0x8e>
		LCD_WriteData(high_bar[i]);
	}
	LCD_WriteCommand(0x80);
 98c:	80 e8       	ldi	r24, 0x80	; 128
 98e:	b3 db       	rcall	.-2202   	; 0xf6 <LCD_WriteCommand>
	
	LCD_WriteCommand(0x58);
 990:	88 e5       	ldi	r24, 0x58	; 88
 992:	b1 db       	rcall	.-2206   	; 0xf6 <LCD_WriteCommand>
 994:	c0 e0       	ldi	r28, 0x00	; 0
 996:	d1 e0       	ldi	r29, 0x01	; 1
 998:	08 e0       	ldi	r16, 0x08	; 8
 99a:	11 e0       	ldi	r17, 0x01	; 1
	for(unsigned char i=0; i<8; i++){
		LCD_WriteData(top_bar[i]);
 99c:	89 91       	ld	r24, Y+
 99e:	ce db       	rcall	.-2148   	; 0x13c <LCD_WriteData>
		LCD_WriteData(high_bar[i]);
	}
	LCD_WriteCommand(0x80);
	
	LCD_WriteCommand(0x58);
	for(unsigned char i=0; i<8; i++){
 9a0:	c0 17       	cp	r28, r16
 9a2:	d1 07       	cpc	r29, r17
 9a4:	d9 f7       	brne	.-10     	; 0x99c <main+0xa8>
		LCD_WriteData(top_bar[i]);
	}
	LCD_WriteCommand(0x80);
 9a6:	80 e8       	ldi	r24, 0x80	; 128
 9a8:	a6 db       	rcall	.-2228   	; 0xf6 <LCD_WriteCommand>

	//init states
	state = start;
 9aa:	10 92 56 01 	sts	0x0156, r1
	rec_state = unarmed;
 9ae:	10 92 55 01 	sts	0x0155, r1
	unsigned char i = 0;
	unsigned char bong = 0;
 9b2:	00 e0       	ldi	r16, 0x00	; 0
	LCD_WriteCommand(0x80);

	//init states
	state = start;
	rec_state = unarmed;
	unsigned char i = 0;
 9b4:	10 e0       	ldi	r17, 0x00	; 0
//Functionality - checks if USART has recieved data
//Parameter: None
//Returns: 1 if true else 0
unsigned char USART_HasReceived()
{
	return (UCSR0A & (1 << RXC0));
 9b6:	c0 ec       	ldi	r28, 0xC0	; 192
 9b8:	d0 e0       	ldi	r29, 0x00	; 0
		bend_pitch();
		tickRecord(bong);
		if (i == 4) {	//only update LCD every 80 ms, looks bad otherwise

			update_LCD();
			i = 0;
 9ba:	f1 2c       	mov	r15, r1
 9bc:	98 81       	ld	r25, Y
	rec_state = unarmed;
	unsigned char i = 0;
	unsigned char bong = 0;
	while(1) //leggo
	{
			if (USART_HasReceived()) {
 9be:	99 23       	and	r25, r25
 9c0:	14 f4       	brge	.+4      	; 0x9c6 <main+0xd2>
				USART_Flush();
 9c2:	ef db       	rcall	.-2082   	; 0x1a2 <USART_Flush>
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <main+0xd6>
			}
			else {
					bong = USART_Receive();
 9c6:	fc db       	rcall	.-2056   	; 0x1c0 <USART_Receive>
 9c8:	08 2f       	mov	r16, r24
					itoa(bong, buff, 10);
					LCD_DisplayString(1,(const unsigned char*)buff);
					*/
			}
			
		tickSM(i);
 9ca:	81 2f       	mov	r24, r17
 9cc:	53 dd       	rcall	.-1370   	; 0x474 <tickSM>
		bend_pitch();
 9ce:	a7 de       	rcall	.-690    	; 0x71e <bend_pitch>
		tickRecord(bong);
 9d0:	80 2f       	mov	r24, r16
 9d2:	d8 dc       	rcall	.-1616   	; 0x384 <tickRecord>
		if (i == 4) {	//only update LCD every 80 ms, looks bad otherwise
 9d4:	14 30       	cpi	r17, 0x04	; 4
 9d6:	19 f4       	brne	.+6      	; 0x9de <main+0xea>

			update_LCD();
 9d8:	0f df       	rcall	.-482    	; 0x7f8 <update_LCD>
			i = 0;
 9da:	1f 2d       	mov	r17, r15
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <main+0xec>
		}
		else {
			i++;
 9de:	1f 5f       	subi	r17, 0xFF	; 255
		}
		set_PWM(note);
 9e0:	60 91 51 01 	lds	r22, 0x0151
 9e4:	70 91 52 01 	lds	r23, 0x0152
 9e8:	80 91 53 01 	lds	r24, 0x0153
 9ec:	90 91 54 01 	lds	r25, 0x0154
 9f0:	4f dc       	rcall	.-1890   	; 0x290 <set_PWM>
		
		while (!TimerFlag);
 9f2:	90 91 47 01 	lds	r25, 0x0147
 9f6:	99 23       	and	r25, r25
 9f8:	e1 f3       	breq	.-8      	; 0x9f2 <main+0xfe>
		TimerFlag = 0;
 9fa:	f0 92 47 01 	sts	0x0147, r15
	}
 9fe:	de cf       	rjmp	.-68     	; 0x9bc <main+0xc8>

00000a00 <__subsf3>:
 a00:	50 58       	subi	r21, 0x80	; 128

00000a02 <__addsf3>:
 a02:	bb 27       	eor	r27, r27
 a04:	aa 27       	eor	r26, r26
 a06:	0e d0       	rcall	.+28     	; 0xa24 <__addsf3x>
 a08:	75 c1       	rjmp	.+746    	; 0xcf4 <__fp_round>
 a0a:	66 d1       	rcall	.+716    	; 0xcd8 <__fp_pscA>
 a0c:	30 f0       	brcs	.+12     	; 0xa1a <__addsf3+0x18>
 a0e:	6b d1       	rcall	.+726    	; 0xce6 <__fp_pscB>
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__addsf3+0x18>
 a12:	31 f4       	brne	.+12     	; 0xa20 <__addsf3+0x1e>
 a14:	9f 3f       	cpi	r25, 0xFF	; 255
 a16:	11 f4       	brne	.+4      	; 0xa1c <__addsf3+0x1a>
 a18:	1e f4       	brtc	.+6      	; 0xa20 <__addsf3+0x1e>
 a1a:	5b c1       	rjmp	.+694    	; 0xcd2 <__fp_nan>
 a1c:	0e f4       	brtc	.+2      	; 0xa20 <__addsf3+0x1e>
 a1e:	e0 95       	com	r30
 a20:	e7 fb       	bst	r30, 7
 a22:	51 c1       	rjmp	.+674    	; 0xcc6 <__fp_inf>

00000a24 <__addsf3x>:
 a24:	e9 2f       	mov	r30, r25
 a26:	77 d1       	rcall	.+750    	; 0xd16 <__fp_split3>
 a28:	80 f3       	brcs	.-32     	; 0xa0a <__addsf3+0x8>
 a2a:	ba 17       	cp	r27, r26
 a2c:	62 07       	cpc	r22, r18
 a2e:	73 07       	cpc	r23, r19
 a30:	84 07       	cpc	r24, r20
 a32:	95 07       	cpc	r25, r21
 a34:	18 f0       	brcs	.+6      	; 0xa3c <__addsf3x+0x18>
 a36:	71 f4       	brne	.+28     	; 0xa54 <__addsf3x+0x30>
 a38:	9e f5       	brtc	.+102    	; 0xaa0 <__addsf3x+0x7c>
 a3a:	8f c1       	rjmp	.+798    	; 0xd5a <__fp_zero>
 a3c:	0e f4       	brtc	.+2      	; 0xa40 <__addsf3x+0x1c>
 a3e:	e0 95       	com	r30
 a40:	0b 2e       	mov	r0, r27
 a42:	ba 2f       	mov	r27, r26
 a44:	a0 2d       	mov	r26, r0
 a46:	0b 01       	movw	r0, r22
 a48:	b9 01       	movw	r22, r18
 a4a:	90 01       	movw	r18, r0
 a4c:	0c 01       	movw	r0, r24
 a4e:	ca 01       	movw	r24, r20
 a50:	a0 01       	movw	r20, r0
 a52:	11 24       	eor	r1, r1
 a54:	ff 27       	eor	r31, r31
 a56:	59 1b       	sub	r21, r25
 a58:	99 f0       	breq	.+38     	; 0xa80 <__addsf3x+0x5c>
 a5a:	59 3f       	cpi	r21, 0xF9	; 249
 a5c:	50 f4       	brcc	.+20     	; 0xa72 <__addsf3x+0x4e>
 a5e:	50 3e       	cpi	r21, 0xE0	; 224
 a60:	68 f1       	brcs	.+90     	; 0xabc <__addsf3x+0x98>
 a62:	1a 16       	cp	r1, r26
 a64:	f0 40       	sbci	r31, 0x00	; 0
 a66:	a2 2f       	mov	r26, r18
 a68:	23 2f       	mov	r18, r19
 a6a:	34 2f       	mov	r19, r20
 a6c:	44 27       	eor	r20, r20
 a6e:	58 5f       	subi	r21, 0xF8	; 248
 a70:	f3 cf       	rjmp	.-26     	; 0xa58 <__addsf3x+0x34>
 a72:	46 95       	lsr	r20
 a74:	37 95       	ror	r19
 a76:	27 95       	ror	r18
 a78:	a7 95       	ror	r26
 a7a:	f0 40       	sbci	r31, 0x00	; 0
 a7c:	53 95       	inc	r21
 a7e:	c9 f7       	brne	.-14     	; 0xa72 <__addsf3x+0x4e>
 a80:	7e f4       	brtc	.+30     	; 0xaa0 <__addsf3x+0x7c>
 a82:	1f 16       	cp	r1, r31
 a84:	ba 0b       	sbc	r27, r26
 a86:	62 0b       	sbc	r22, r18
 a88:	73 0b       	sbc	r23, r19
 a8a:	84 0b       	sbc	r24, r20
 a8c:	ba f0       	brmi	.+46     	; 0xabc <__addsf3x+0x98>
 a8e:	91 50       	subi	r25, 0x01	; 1
 a90:	a1 f0       	breq	.+40     	; 0xaba <__addsf3x+0x96>
 a92:	ff 0f       	add	r31, r31
 a94:	bb 1f       	adc	r27, r27
 a96:	66 1f       	adc	r22, r22
 a98:	77 1f       	adc	r23, r23
 a9a:	88 1f       	adc	r24, r24
 a9c:	c2 f7       	brpl	.-16     	; 0xa8e <__addsf3x+0x6a>
 a9e:	0e c0       	rjmp	.+28     	; 0xabc <__addsf3x+0x98>
 aa0:	ba 0f       	add	r27, r26
 aa2:	62 1f       	adc	r22, r18
 aa4:	73 1f       	adc	r23, r19
 aa6:	84 1f       	adc	r24, r20
 aa8:	48 f4       	brcc	.+18     	; 0xabc <__addsf3x+0x98>
 aaa:	87 95       	ror	r24
 aac:	77 95       	ror	r23
 aae:	67 95       	ror	r22
 ab0:	b7 95       	ror	r27
 ab2:	f7 95       	ror	r31
 ab4:	9e 3f       	cpi	r25, 0xFE	; 254
 ab6:	08 f0       	brcs	.+2      	; 0xaba <__addsf3x+0x96>
 ab8:	b3 cf       	rjmp	.-154    	; 0xa20 <__addsf3+0x1e>
 aba:	93 95       	inc	r25
 abc:	88 0f       	add	r24, r24
 abe:	08 f0       	brcs	.+2      	; 0xac2 <__addsf3x+0x9e>
 ac0:	99 27       	eor	r25, r25
 ac2:	ee 0f       	add	r30, r30
 ac4:	97 95       	ror	r25
 ac6:	87 95       	ror	r24
 ac8:	08 95       	ret

00000aca <__cmpsf2>:
 aca:	d9 d0       	rcall	.+434    	; 0xc7e <__fp_cmp>
 acc:	08 f4       	brcc	.+2      	; 0xad0 <__cmpsf2+0x6>
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	08 95       	ret

00000ad2 <__divsf3>:
 ad2:	0c d0       	rcall	.+24     	; 0xaec <__divsf3x>
 ad4:	0f c1       	rjmp	.+542    	; 0xcf4 <__fp_round>
 ad6:	07 d1       	rcall	.+526    	; 0xce6 <__fp_pscB>
 ad8:	40 f0       	brcs	.+16     	; 0xaea <__divsf3+0x18>
 ada:	fe d0       	rcall	.+508    	; 0xcd8 <__fp_pscA>
 adc:	30 f0       	brcs	.+12     	; 0xaea <__divsf3+0x18>
 ade:	21 f4       	brne	.+8      	; 0xae8 <__divsf3+0x16>
 ae0:	5f 3f       	cpi	r21, 0xFF	; 255
 ae2:	19 f0       	breq	.+6      	; 0xaea <__divsf3+0x18>
 ae4:	f0 c0       	rjmp	.+480    	; 0xcc6 <__fp_inf>
 ae6:	51 11       	cpse	r21, r1
 ae8:	39 c1       	rjmp	.+626    	; 0xd5c <__fp_szero>
 aea:	f3 c0       	rjmp	.+486    	; 0xcd2 <__fp_nan>

00000aec <__divsf3x>:
 aec:	14 d1       	rcall	.+552    	; 0xd16 <__fp_split3>
 aee:	98 f3       	brcs	.-26     	; 0xad6 <__divsf3+0x4>

00000af0 <__divsf3_pse>:
 af0:	99 23       	and	r25, r25
 af2:	c9 f3       	breq	.-14     	; 0xae6 <__divsf3+0x14>
 af4:	55 23       	and	r21, r21
 af6:	b1 f3       	breq	.-20     	; 0xae4 <__divsf3+0x12>
 af8:	95 1b       	sub	r25, r21
 afa:	55 0b       	sbc	r21, r21
 afc:	bb 27       	eor	r27, r27
 afe:	aa 27       	eor	r26, r26
 b00:	62 17       	cp	r22, r18
 b02:	73 07       	cpc	r23, r19
 b04:	84 07       	cpc	r24, r20
 b06:	38 f0       	brcs	.+14     	; 0xb16 <__divsf3_pse+0x26>
 b08:	9f 5f       	subi	r25, 0xFF	; 255
 b0a:	5f 4f       	sbci	r21, 0xFF	; 255
 b0c:	22 0f       	add	r18, r18
 b0e:	33 1f       	adc	r19, r19
 b10:	44 1f       	adc	r20, r20
 b12:	aa 1f       	adc	r26, r26
 b14:	a9 f3       	breq	.-22     	; 0xb00 <__divsf3_pse+0x10>
 b16:	33 d0       	rcall	.+102    	; 0xb7e <__divsf3_pse+0x8e>
 b18:	0e 2e       	mov	r0, r30
 b1a:	3a f0       	brmi	.+14     	; 0xb2a <__divsf3_pse+0x3a>
 b1c:	e0 e8       	ldi	r30, 0x80	; 128
 b1e:	30 d0       	rcall	.+96     	; 0xb80 <__divsf3_pse+0x90>
 b20:	91 50       	subi	r25, 0x01	; 1
 b22:	50 40       	sbci	r21, 0x00	; 0
 b24:	e6 95       	lsr	r30
 b26:	00 1c       	adc	r0, r0
 b28:	ca f7       	brpl	.-14     	; 0xb1c <__divsf3_pse+0x2c>
 b2a:	29 d0       	rcall	.+82     	; 0xb7e <__divsf3_pse+0x8e>
 b2c:	fe 2f       	mov	r31, r30
 b2e:	27 d0       	rcall	.+78     	; 0xb7e <__divsf3_pse+0x8e>
 b30:	66 0f       	add	r22, r22
 b32:	77 1f       	adc	r23, r23
 b34:	88 1f       	adc	r24, r24
 b36:	bb 1f       	adc	r27, r27
 b38:	26 17       	cp	r18, r22
 b3a:	37 07       	cpc	r19, r23
 b3c:	48 07       	cpc	r20, r24
 b3e:	ab 07       	cpc	r26, r27
 b40:	b0 e8       	ldi	r27, 0x80	; 128
 b42:	09 f0       	breq	.+2      	; 0xb46 <__divsf3_pse+0x56>
 b44:	bb 0b       	sbc	r27, r27
 b46:	80 2d       	mov	r24, r0
 b48:	bf 01       	movw	r22, r30
 b4a:	ff 27       	eor	r31, r31
 b4c:	93 58       	subi	r25, 0x83	; 131
 b4e:	5f 4f       	sbci	r21, 0xFF	; 255
 b50:	2a f0       	brmi	.+10     	; 0xb5c <__divsf3_pse+0x6c>
 b52:	9e 3f       	cpi	r25, 0xFE	; 254
 b54:	51 05       	cpc	r21, r1
 b56:	68 f0       	brcs	.+26     	; 0xb72 <__divsf3_pse+0x82>
 b58:	b6 c0       	rjmp	.+364    	; 0xcc6 <__fp_inf>
 b5a:	00 c1       	rjmp	.+512    	; 0xd5c <__fp_szero>
 b5c:	5f 3f       	cpi	r21, 0xFF	; 255
 b5e:	ec f3       	brlt	.-6      	; 0xb5a <__divsf3_pse+0x6a>
 b60:	98 3e       	cpi	r25, 0xE8	; 232
 b62:	dc f3       	brlt	.-10     	; 0xb5a <__divsf3_pse+0x6a>
 b64:	86 95       	lsr	r24
 b66:	77 95       	ror	r23
 b68:	67 95       	ror	r22
 b6a:	b7 95       	ror	r27
 b6c:	f7 95       	ror	r31
 b6e:	9f 5f       	subi	r25, 0xFF	; 255
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__divsf3_pse+0x74>
 b72:	88 0f       	add	r24, r24
 b74:	91 1d       	adc	r25, r1
 b76:	96 95       	lsr	r25
 b78:	87 95       	ror	r24
 b7a:	97 f9       	bld	r25, 7
 b7c:	08 95       	ret
 b7e:	e1 e0       	ldi	r30, 0x01	; 1
 b80:	66 0f       	add	r22, r22
 b82:	77 1f       	adc	r23, r23
 b84:	88 1f       	adc	r24, r24
 b86:	bb 1f       	adc	r27, r27
 b88:	62 17       	cp	r22, r18
 b8a:	73 07       	cpc	r23, r19
 b8c:	84 07       	cpc	r24, r20
 b8e:	ba 07       	cpc	r27, r26
 b90:	20 f0       	brcs	.+8      	; 0xb9a <__divsf3_pse+0xaa>
 b92:	62 1b       	sub	r22, r18
 b94:	73 0b       	sbc	r23, r19
 b96:	84 0b       	sbc	r24, r20
 b98:	ba 0b       	sbc	r27, r26
 b9a:	ee 1f       	adc	r30, r30
 b9c:	88 f7       	brcc	.-30     	; 0xb80 <__divsf3_pse+0x90>
 b9e:	e0 95       	com	r30
 ba0:	08 95       	ret

00000ba2 <__fixsfsi>:
 ba2:	04 d0       	rcall	.+8      	; 0xbac <__fixunssfsi>
 ba4:	68 94       	set
 ba6:	b1 11       	cpse	r27, r1
 ba8:	d9 c0       	rjmp	.+434    	; 0xd5c <__fp_szero>
 baa:	08 95       	ret

00000bac <__fixunssfsi>:
 bac:	bc d0       	rcall	.+376    	; 0xd26 <__fp_splitA>
 bae:	88 f0       	brcs	.+34     	; 0xbd2 <__fixunssfsi+0x26>
 bb0:	9f 57       	subi	r25, 0x7F	; 127
 bb2:	90 f0       	brcs	.+36     	; 0xbd8 <__fixunssfsi+0x2c>
 bb4:	b9 2f       	mov	r27, r25
 bb6:	99 27       	eor	r25, r25
 bb8:	b7 51       	subi	r27, 0x17	; 23
 bba:	a0 f0       	brcs	.+40     	; 0xbe4 <__fixunssfsi+0x38>
 bbc:	d1 f0       	breq	.+52     	; 0xbf2 <__fixunssfsi+0x46>
 bbe:	66 0f       	add	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	99 1f       	adc	r25, r25
 bc6:	1a f0       	brmi	.+6      	; 0xbce <__fixunssfsi+0x22>
 bc8:	ba 95       	dec	r27
 bca:	c9 f7       	brne	.-14     	; 0xbbe <__fixunssfsi+0x12>
 bcc:	12 c0       	rjmp	.+36     	; 0xbf2 <__fixunssfsi+0x46>
 bce:	b1 30       	cpi	r27, 0x01	; 1
 bd0:	81 f0       	breq	.+32     	; 0xbf2 <__fixunssfsi+0x46>
 bd2:	c3 d0       	rcall	.+390    	; 0xd5a <__fp_zero>
 bd4:	b1 e0       	ldi	r27, 0x01	; 1
 bd6:	08 95       	ret
 bd8:	c0 c0       	rjmp	.+384    	; 0xd5a <__fp_zero>
 bda:	67 2f       	mov	r22, r23
 bdc:	78 2f       	mov	r23, r24
 bde:	88 27       	eor	r24, r24
 be0:	b8 5f       	subi	r27, 0xF8	; 248
 be2:	39 f0       	breq	.+14     	; 0xbf2 <__fixunssfsi+0x46>
 be4:	b9 3f       	cpi	r27, 0xF9	; 249
 be6:	cc f3       	brlt	.-14     	; 0xbda <__fixunssfsi+0x2e>
 be8:	86 95       	lsr	r24
 bea:	77 95       	ror	r23
 bec:	67 95       	ror	r22
 bee:	b3 95       	inc	r27
 bf0:	d9 f7       	brne	.-10     	; 0xbe8 <__fixunssfsi+0x3c>
 bf2:	3e f4       	brtc	.+14     	; 0xc02 <__fixunssfsi+0x56>
 bf4:	90 95       	com	r25
 bf6:	80 95       	com	r24
 bf8:	70 95       	com	r23
 bfa:	61 95       	neg	r22
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255
 bfe:	8f 4f       	sbci	r24, 0xFF	; 255
 c00:	9f 4f       	sbci	r25, 0xFF	; 255
 c02:	08 95       	ret

00000c04 <__floatunsisf>:
 c04:	e8 94       	clt
 c06:	09 c0       	rjmp	.+18     	; 0xc1a <__floatsisf+0x12>

00000c08 <__floatsisf>:
 c08:	97 fb       	bst	r25, 7
 c0a:	3e f4       	brtc	.+14     	; 0xc1a <__floatsisf+0x12>
 c0c:	90 95       	com	r25
 c0e:	80 95       	com	r24
 c10:	70 95       	com	r23
 c12:	61 95       	neg	r22
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	99 23       	and	r25, r25
 c1c:	a9 f0       	breq	.+42     	; 0xc48 <__floatsisf+0x40>
 c1e:	f9 2f       	mov	r31, r25
 c20:	96 e9       	ldi	r25, 0x96	; 150
 c22:	bb 27       	eor	r27, r27
 c24:	93 95       	inc	r25
 c26:	f6 95       	lsr	r31
 c28:	87 95       	ror	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	b7 95       	ror	r27
 c30:	f1 11       	cpse	r31, r1
 c32:	f8 cf       	rjmp	.-16     	; 0xc24 <__floatsisf+0x1c>
 c34:	fa f4       	brpl	.+62     	; 0xc74 <__floatsisf+0x6c>
 c36:	bb 0f       	add	r27, r27
 c38:	11 f4       	brne	.+4      	; 0xc3e <__floatsisf+0x36>
 c3a:	60 ff       	sbrs	r22, 0
 c3c:	1b c0       	rjmp	.+54     	; 0xc74 <__floatsisf+0x6c>
 c3e:	6f 5f       	subi	r22, 0xFF	; 255
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	16 c0       	rjmp	.+44     	; 0xc74 <__floatsisf+0x6c>
 c48:	88 23       	and	r24, r24
 c4a:	11 f0       	breq	.+4      	; 0xc50 <__floatsisf+0x48>
 c4c:	96 e9       	ldi	r25, 0x96	; 150
 c4e:	11 c0       	rjmp	.+34     	; 0xc72 <__floatsisf+0x6a>
 c50:	77 23       	and	r23, r23
 c52:	21 f0       	breq	.+8      	; 0xc5c <__floatsisf+0x54>
 c54:	9e e8       	ldi	r25, 0x8E	; 142
 c56:	87 2f       	mov	r24, r23
 c58:	76 2f       	mov	r23, r22
 c5a:	05 c0       	rjmp	.+10     	; 0xc66 <__floatsisf+0x5e>
 c5c:	66 23       	and	r22, r22
 c5e:	71 f0       	breq	.+28     	; 0xc7c <__floatsisf+0x74>
 c60:	96 e8       	ldi	r25, 0x86	; 134
 c62:	86 2f       	mov	r24, r22
 c64:	70 e0       	ldi	r23, 0x00	; 0
 c66:	60 e0       	ldi	r22, 0x00	; 0
 c68:	2a f0       	brmi	.+10     	; 0xc74 <__floatsisf+0x6c>
 c6a:	9a 95       	dec	r25
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	da f7       	brpl	.-10     	; 0xc6a <__floatsisf+0x62>
 c74:	88 0f       	add	r24, r24
 c76:	96 95       	lsr	r25
 c78:	87 95       	ror	r24
 c7a:	97 f9       	bld	r25, 7
 c7c:	08 95       	ret

00000c7e <__fp_cmp>:
 c7e:	99 0f       	add	r25, r25
 c80:	00 08       	sbc	r0, r0
 c82:	55 0f       	add	r21, r21
 c84:	aa 0b       	sbc	r26, r26
 c86:	e0 e8       	ldi	r30, 0x80	; 128
 c88:	fe ef       	ldi	r31, 0xFE	; 254
 c8a:	16 16       	cp	r1, r22
 c8c:	17 06       	cpc	r1, r23
 c8e:	e8 07       	cpc	r30, r24
 c90:	f9 07       	cpc	r31, r25
 c92:	c0 f0       	brcs	.+48     	; 0xcc4 <__fp_cmp+0x46>
 c94:	12 16       	cp	r1, r18
 c96:	13 06       	cpc	r1, r19
 c98:	e4 07       	cpc	r30, r20
 c9a:	f5 07       	cpc	r31, r21
 c9c:	98 f0       	brcs	.+38     	; 0xcc4 <__fp_cmp+0x46>
 c9e:	62 1b       	sub	r22, r18
 ca0:	73 0b       	sbc	r23, r19
 ca2:	84 0b       	sbc	r24, r20
 ca4:	95 0b       	sbc	r25, r21
 ca6:	39 f4       	brne	.+14     	; 0xcb6 <__fp_cmp+0x38>
 ca8:	0a 26       	eor	r0, r26
 caa:	61 f0       	breq	.+24     	; 0xcc4 <__fp_cmp+0x46>
 cac:	23 2b       	or	r18, r19
 cae:	24 2b       	or	r18, r20
 cb0:	25 2b       	or	r18, r21
 cb2:	21 f4       	brne	.+8      	; 0xcbc <__fp_cmp+0x3e>
 cb4:	08 95       	ret
 cb6:	0a 26       	eor	r0, r26
 cb8:	09 f4       	brne	.+2      	; 0xcbc <__fp_cmp+0x3e>
 cba:	a1 40       	sbci	r26, 0x01	; 1
 cbc:	a6 95       	lsr	r26
 cbe:	8f ef       	ldi	r24, 0xFF	; 255
 cc0:	81 1d       	adc	r24, r1
 cc2:	81 1d       	adc	r24, r1
 cc4:	08 95       	ret

00000cc6 <__fp_inf>:
 cc6:	97 f9       	bld	r25, 7
 cc8:	9f 67       	ori	r25, 0x7F	; 127
 cca:	80 e8       	ldi	r24, 0x80	; 128
 ccc:	70 e0       	ldi	r23, 0x00	; 0
 cce:	60 e0       	ldi	r22, 0x00	; 0
 cd0:	08 95       	ret

00000cd2 <__fp_nan>:
 cd2:	9f ef       	ldi	r25, 0xFF	; 255
 cd4:	80 ec       	ldi	r24, 0xC0	; 192
 cd6:	08 95       	ret

00000cd8 <__fp_pscA>:
 cd8:	00 24       	eor	r0, r0
 cda:	0a 94       	dec	r0
 cdc:	16 16       	cp	r1, r22
 cde:	17 06       	cpc	r1, r23
 ce0:	18 06       	cpc	r1, r24
 ce2:	09 06       	cpc	r0, r25
 ce4:	08 95       	ret

00000ce6 <__fp_pscB>:
 ce6:	00 24       	eor	r0, r0
 ce8:	0a 94       	dec	r0
 cea:	12 16       	cp	r1, r18
 cec:	13 06       	cpc	r1, r19
 cee:	14 06       	cpc	r1, r20
 cf0:	05 06       	cpc	r0, r21
 cf2:	08 95       	ret

00000cf4 <__fp_round>:
 cf4:	09 2e       	mov	r0, r25
 cf6:	03 94       	inc	r0
 cf8:	00 0c       	add	r0, r0
 cfa:	11 f4       	brne	.+4      	; 0xd00 <__fp_round+0xc>
 cfc:	88 23       	and	r24, r24
 cfe:	52 f0       	brmi	.+20     	; 0xd14 <__fp_round+0x20>
 d00:	bb 0f       	add	r27, r27
 d02:	40 f4       	brcc	.+16     	; 0xd14 <__fp_round+0x20>
 d04:	bf 2b       	or	r27, r31
 d06:	11 f4       	brne	.+4      	; 0xd0c <__fp_round+0x18>
 d08:	60 ff       	sbrs	r22, 0
 d0a:	04 c0       	rjmp	.+8      	; 0xd14 <__fp_round+0x20>
 d0c:	6f 5f       	subi	r22, 0xFF	; 255
 d0e:	7f 4f       	sbci	r23, 0xFF	; 255
 d10:	8f 4f       	sbci	r24, 0xFF	; 255
 d12:	9f 4f       	sbci	r25, 0xFF	; 255
 d14:	08 95       	ret

00000d16 <__fp_split3>:
 d16:	57 fd       	sbrc	r21, 7
 d18:	90 58       	subi	r25, 0x80	; 128
 d1a:	44 0f       	add	r20, r20
 d1c:	55 1f       	adc	r21, r21
 d1e:	59 f0       	breq	.+22     	; 0xd36 <__fp_splitA+0x10>
 d20:	5f 3f       	cpi	r21, 0xFF	; 255
 d22:	71 f0       	breq	.+28     	; 0xd40 <__fp_splitA+0x1a>
 d24:	47 95       	ror	r20

00000d26 <__fp_splitA>:
 d26:	88 0f       	add	r24, r24
 d28:	97 fb       	bst	r25, 7
 d2a:	99 1f       	adc	r25, r25
 d2c:	61 f0       	breq	.+24     	; 0xd46 <__fp_splitA+0x20>
 d2e:	9f 3f       	cpi	r25, 0xFF	; 255
 d30:	79 f0       	breq	.+30     	; 0xd50 <__fp_splitA+0x2a>
 d32:	87 95       	ror	r24
 d34:	08 95       	ret
 d36:	12 16       	cp	r1, r18
 d38:	13 06       	cpc	r1, r19
 d3a:	14 06       	cpc	r1, r20
 d3c:	55 1f       	adc	r21, r21
 d3e:	f2 cf       	rjmp	.-28     	; 0xd24 <__fp_split3+0xe>
 d40:	46 95       	lsr	r20
 d42:	f1 df       	rcall	.-30     	; 0xd26 <__fp_splitA>
 d44:	08 c0       	rjmp	.+16     	; 0xd56 <__fp_splitA+0x30>
 d46:	16 16       	cp	r1, r22
 d48:	17 06       	cpc	r1, r23
 d4a:	18 06       	cpc	r1, r24
 d4c:	99 1f       	adc	r25, r25
 d4e:	f1 cf       	rjmp	.-30     	; 0xd32 <__fp_splitA+0xc>
 d50:	86 95       	lsr	r24
 d52:	71 05       	cpc	r23, r1
 d54:	61 05       	cpc	r22, r1
 d56:	08 94       	sec
 d58:	08 95       	ret

00000d5a <__fp_zero>:
 d5a:	e8 94       	clt

00000d5c <__fp_szero>:
 d5c:	bb 27       	eor	r27, r27
 d5e:	66 27       	eor	r22, r22
 d60:	77 27       	eor	r23, r23
 d62:	cb 01       	movw	r24, r22
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret

00000d68 <__gesf2>:
 d68:	8a df       	rcall	.-236    	; 0xc7e <__fp_cmp>
 d6a:	08 f4       	brcc	.+2      	; 0xd6e <__gesf2+0x6>
 d6c:	8f ef       	ldi	r24, 0xFF	; 255
 d6e:	08 95       	ret

00000d70 <__mulsf3>:
 d70:	0b d0       	rcall	.+22     	; 0xd88 <__mulsf3x>
 d72:	c0 cf       	rjmp	.-128    	; 0xcf4 <__fp_round>
 d74:	b1 df       	rcall	.-158    	; 0xcd8 <__fp_pscA>
 d76:	28 f0       	brcs	.+10     	; 0xd82 <__mulsf3+0x12>
 d78:	b6 df       	rcall	.-148    	; 0xce6 <__fp_pscB>
 d7a:	18 f0       	brcs	.+6      	; 0xd82 <__mulsf3+0x12>
 d7c:	95 23       	and	r25, r21
 d7e:	09 f0       	breq	.+2      	; 0xd82 <__mulsf3+0x12>
 d80:	a2 cf       	rjmp	.-188    	; 0xcc6 <__fp_inf>
 d82:	a7 cf       	rjmp	.-178    	; 0xcd2 <__fp_nan>
 d84:	11 24       	eor	r1, r1
 d86:	ea cf       	rjmp	.-44     	; 0xd5c <__fp_szero>

00000d88 <__mulsf3x>:
 d88:	c6 df       	rcall	.-116    	; 0xd16 <__fp_split3>
 d8a:	a0 f3       	brcs	.-24     	; 0xd74 <__mulsf3+0x4>

00000d8c <__mulsf3_pse>:
 d8c:	95 9f       	mul	r25, r21
 d8e:	d1 f3       	breq	.-12     	; 0xd84 <__mulsf3+0x14>
 d90:	95 0f       	add	r25, r21
 d92:	50 e0       	ldi	r21, 0x00	; 0
 d94:	55 1f       	adc	r21, r21
 d96:	62 9f       	mul	r22, r18
 d98:	f0 01       	movw	r30, r0
 d9a:	72 9f       	mul	r23, r18
 d9c:	bb 27       	eor	r27, r27
 d9e:	f0 0d       	add	r31, r0
 da0:	b1 1d       	adc	r27, r1
 da2:	63 9f       	mul	r22, r19
 da4:	aa 27       	eor	r26, r26
 da6:	f0 0d       	add	r31, r0
 da8:	b1 1d       	adc	r27, r1
 daa:	aa 1f       	adc	r26, r26
 dac:	64 9f       	mul	r22, r20
 dae:	66 27       	eor	r22, r22
 db0:	b0 0d       	add	r27, r0
 db2:	a1 1d       	adc	r26, r1
 db4:	66 1f       	adc	r22, r22
 db6:	82 9f       	mul	r24, r18
 db8:	22 27       	eor	r18, r18
 dba:	b0 0d       	add	r27, r0
 dbc:	a1 1d       	adc	r26, r1
 dbe:	62 1f       	adc	r22, r18
 dc0:	73 9f       	mul	r23, r19
 dc2:	b0 0d       	add	r27, r0
 dc4:	a1 1d       	adc	r26, r1
 dc6:	62 1f       	adc	r22, r18
 dc8:	83 9f       	mul	r24, r19
 dca:	a0 0d       	add	r26, r0
 dcc:	61 1d       	adc	r22, r1
 dce:	22 1f       	adc	r18, r18
 dd0:	74 9f       	mul	r23, r20
 dd2:	33 27       	eor	r19, r19
 dd4:	a0 0d       	add	r26, r0
 dd6:	61 1d       	adc	r22, r1
 dd8:	23 1f       	adc	r18, r19
 dda:	84 9f       	mul	r24, r20
 ddc:	60 0d       	add	r22, r0
 dde:	21 1d       	adc	r18, r1
 de0:	82 2f       	mov	r24, r18
 de2:	76 2f       	mov	r23, r22
 de4:	6a 2f       	mov	r22, r26
 de6:	11 24       	eor	r1, r1
 de8:	9f 57       	subi	r25, 0x7F	; 127
 dea:	50 40       	sbci	r21, 0x00	; 0
 dec:	8a f0       	brmi	.+34     	; 0xe10 <__mulsf3_pse+0x84>
 dee:	e1 f0       	breq	.+56     	; 0xe28 <__mulsf3_pse+0x9c>
 df0:	88 23       	and	r24, r24
 df2:	4a f0       	brmi	.+18     	; 0xe06 <__mulsf3_pse+0x7a>
 df4:	ee 0f       	add	r30, r30
 df6:	ff 1f       	adc	r31, r31
 df8:	bb 1f       	adc	r27, r27
 dfa:	66 1f       	adc	r22, r22
 dfc:	77 1f       	adc	r23, r23
 dfe:	88 1f       	adc	r24, r24
 e00:	91 50       	subi	r25, 0x01	; 1
 e02:	50 40       	sbci	r21, 0x00	; 0
 e04:	a9 f7       	brne	.-22     	; 0xdf0 <__mulsf3_pse+0x64>
 e06:	9e 3f       	cpi	r25, 0xFE	; 254
 e08:	51 05       	cpc	r21, r1
 e0a:	70 f0       	brcs	.+28     	; 0xe28 <__mulsf3_pse+0x9c>
 e0c:	5c cf       	rjmp	.-328    	; 0xcc6 <__fp_inf>
 e0e:	a6 cf       	rjmp	.-180    	; 0xd5c <__fp_szero>
 e10:	5f 3f       	cpi	r21, 0xFF	; 255
 e12:	ec f3       	brlt	.-6      	; 0xe0e <__mulsf3_pse+0x82>
 e14:	98 3e       	cpi	r25, 0xE8	; 232
 e16:	dc f3       	brlt	.-10     	; 0xe0e <__mulsf3_pse+0x82>
 e18:	86 95       	lsr	r24
 e1a:	77 95       	ror	r23
 e1c:	67 95       	ror	r22
 e1e:	b7 95       	ror	r27
 e20:	f7 95       	ror	r31
 e22:	e7 95       	ror	r30
 e24:	9f 5f       	subi	r25, 0xFF	; 255
 e26:	c1 f7       	brne	.-16     	; 0xe18 <__mulsf3_pse+0x8c>
 e28:	fe 2b       	or	r31, r30
 e2a:	88 0f       	add	r24, r24
 e2c:	91 1d       	adc	r25, r1
 e2e:	96 95       	lsr	r25
 e30:	87 95       	ror	r24
 e32:	97 f9       	bld	r25, 7
 e34:	08 95       	ret

00000e36 <__divmodhi4>:
 e36:	97 fb       	bst	r25, 7
 e38:	07 2e       	mov	r0, r23
 e3a:	16 f4       	brtc	.+4      	; 0xe40 <__divmodhi4+0xa>
 e3c:	00 94       	com	r0
 e3e:	06 d0       	rcall	.+12     	; 0xe4c <__divmodhi4_neg1>
 e40:	77 fd       	sbrc	r23, 7
 e42:	08 d0       	rcall	.+16     	; 0xe54 <__divmodhi4_neg2>
 e44:	0b d0       	rcall	.+22     	; 0xe5c <__udivmodhi4>
 e46:	07 fc       	sbrc	r0, 7
 e48:	05 d0       	rcall	.+10     	; 0xe54 <__divmodhi4_neg2>
 e4a:	3e f4       	brtc	.+14     	; 0xe5a <__divmodhi4_exit>

00000e4c <__divmodhi4_neg1>:
 e4c:	90 95       	com	r25
 e4e:	81 95       	neg	r24
 e50:	9f 4f       	sbci	r25, 0xFF	; 255
 e52:	08 95       	ret

00000e54 <__divmodhi4_neg2>:
 e54:	70 95       	com	r23
 e56:	61 95       	neg	r22
 e58:	7f 4f       	sbci	r23, 0xFF	; 255

00000e5a <__divmodhi4_exit>:
 e5a:	08 95       	ret

00000e5c <__udivmodhi4>:
 e5c:	aa 1b       	sub	r26, r26
 e5e:	bb 1b       	sub	r27, r27
 e60:	51 e1       	ldi	r21, 0x11	; 17
 e62:	07 c0       	rjmp	.+14     	; 0xe72 <__udivmodhi4_ep>

00000e64 <__udivmodhi4_loop>:
 e64:	aa 1f       	adc	r26, r26
 e66:	bb 1f       	adc	r27, r27
 e68:	a6 17       	cp	r26, r22
 e6a:	b7 07       	cpc	r27, r23
 e6c:	10 f0       	brcs	.+4      	; 0xe72 <__udivmodhi4_ep>
 e6e:	a6 1b       	sub	r26, r22
 e70:	b7 0b       	sbc	r27, r23

00000e72 <__udivmodhi4_ep>:
 e72:	88 1f       	adc	r24, r24
 e74:	99 1f       	adc	r25, r25
 e76:	5a 95       	dec	r21
 e78:	a9 f7       	brne	.-22     	; 0xe64 <__udivmodhi4_loop>
 e7a:	80 95       	com	r24
 e7c:	90 95       	com	r25
 e7e:	bc 01       	movw	r22, r24
 e80:	cd 01       	movw	r24, r26
 e82:	08 95       	ret

00000e84 <__eerd_word_m1284>:
 e84:	a8 e1       	ldi	r26, 0x18	; 24
 e86:	b0 e0       	ldi	r27, 0x00	; 0
 e88:	42 e0       	ldi	r20, 0x02	; 2
 e8a:	50 e0       	ldi	r21, 0x00	; 0
 e8c:	05 c0       	rjmp	.+10     	; 0xe98 <__eerd_blraw_m1284>

00000e8e <__eewr_word_m1284>:
 e8e:	12 d0       	rcall	.+36     	; 0xeb4 <__eewr_byte_m1284>
 e90:	27 2f       	mov	r18, r23
 e92:	11 c0       	rjmp	.+34     	; 0xeb6 <__eewr_r18_m1284>

00000e94 <__eerd_block_m1284>:
 e94:	dc 01       	movw	r26, r24
 e96:	cb 01       	movw	r24, r22

00000e98 <__eerd_blraw_m1284>:
 e98:	fc 01       	movw	r30, r24
 e9a:	f9 99       	sbic	0x1f, 1	; 31
 e9c:	fe cf       	rjmp	.-4      	; 0xe9a <__eerd_blraw_m1284+0x2>
 e9e:	06 c0       	rjmp	.+12     	; 0xeac <__eerd_blraw_m1284+0x14>
 ea0:	f2 bd       	out	0x22, r31	; 34
 ea2:	e1 bd       	out	0x21, r30	; 33
 ea4:	f8 9a       	sbi	0x1f, 0	; 31
 ea6:	31 96       	adiw	r30, 0x01	; 1
 ea8:	00 b4       	in	r0, 0x20	; 32
 eaa:	0d 92       	st	X+, r0
 eac:	41 50       	subi	r20, 0x01	; 1
 eae:	50 40       	sbci	r21, 0x00	; 0
 eb0:	b8 f7       	brcc	.-18     	; 0xea0 <__eerd_blraw_m1284+0x8>
 eb2:	08 95       	ret

00000eb4 <__eewr_byte_m1284>:
 eb4:	26 2f       	mov	r18, r22

00000eb6 <__eewr_r18_m1284>:
 eb6:	f9 99       	sbic	0x1f, 1	; 31
 eb8:	fe cf       	rjmp	.-4      	; 0xeb6 <__eewr_r18_m1284>
 eba:	1f ba       	out	0x1f, r1	; 31
 ebc:	92 bd       	out	0x22, r25	; 34
 ebe:	81 bd       	out	0x21, r24	; 33
 ec0:	20 bd       	out	0x20, r18	; 32
 ec2:	0f b6       	in	r0, 0x3f	; 63
 ec4:	f8 94       	cli
 ec6:	fa 9a       	sbi	0x1f, 2	; 31
 ec8:	f9 9a       	sbi	0x1f, 1	; 31
 eca:	0f be       	out	0x3f, r0	; 63
 ecc:	01 96       	adiw	r24, 0x01	; 1
 ece:	08 95       	ret

00000ed0 <_exit>:
 ed0:	f8 94       	cli

00000ed2 <__stop_program>:
 ed2:	ff cf       	rjmp	.-2      	; 0xed2 <__stop_program>
